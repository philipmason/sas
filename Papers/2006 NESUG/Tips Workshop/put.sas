*** WAYS TO USE THE PUT STATEMENT ;
data _null_ ;
  x=1 ;
  y=2 ;
  z=3 ;
  Put x y z ; * Write values of 3 variables out separated by a space;
run ;
data _null_ ;
  Put 'hello' '09'x ; *Write text followed by hexadecimal 09 - which is a tab character (in ASCII);
run ;
data _null_ ;
  Put 132*'_' ; *Write 132 underscores;
run ;
data _null_ ;
  cost=123.45 ;
  Put #3 @44 cost ; *Write value of cost out beginning at line 3 column 44;
run ;
data _null_ ;
  var='abcdefghijklm' ;
  Put var 1-5 ; *Write the value of var out into the columns from column 1 to column 5;
run ;
data _null_ ;
  cost=123.45 ;
  Put cost dollar12.2 ; *Write the value of cost out using the dollar12.2 format;
run ;
data _null_ ;
  a=3 ;
  b='dog' ;
  Put (a b) (1. ',' $3.) ;  *Write the value of a out using a 1. format, then a comma, then the value of b using a $3. format;
run ;
data _null_ ;
  input ;
  Put _infile_ ;  *Write out the current input buffer, as read by the last input statement;
cards ;
test this input file
;;
run ;
data _null_ ;
  set sashelp.class(obs=1) ;
  Put _all_ ; *Write out the values of all variables, including _error_ and _n_;
run ;
data _null_ ;
  a=1 ;
  b=2 ;
  c=3 ;
  Put a b c @ ; *Write values of variables a, b & c out, separated by spaces & keep line "open" so that next put statement will continue on. If we reach end of data step iteration then line is "closed";
  * Note: @@ behaves the same for output, but different for input ;
  put 'this will be on the end of the line' ;
run ;
data _null_ ;
  name='phil mason' ;
  Put @10 name ;  *Write value of name at column 10;
run ;
data _null_ ;
  pos=40 ;
  name='Mike Davis' ;
  Put @pos name ; *Write value of name at column specified in variable pos;
run ;
data _null_ ;
  pos=5 ;
  name='Mad Doggy' ;
  Put @(3*pos) name ; *Write value of name at column calculated by value of pos multiplied by 3;
run ;
data _null_ ;
  a='one' ;
  b='two' ;
  Put a +3 b ;  *Write value of a followed by 3 spaces and then value of b;
run ;
data _null_ ;
  a='one' ;
  gap=20 ;
  b='two' ;
  Put a +gap b ;  *Write value of a followed by a number of spaces specified in variable gap, and then value of b;
run ;
data _null_ ;
  a='one' ;
  gap=20 ;
  b='two' ;
  Put a +(2*gap) b ;  *Write value of a followed by a number of spaces calculated by value of gap multiplied by 2, and then value of b;
run ;
data _null_ ;
  text='line 2' ;
  Put #2 text ; *Write value of text at line 2;
run ;
data _null_ ;
  line=3 ;
  text='line 3' ;
  Put #line text ;  *Write value of text at line specified in variable line;
run ;
data _null_ ;
  line=3 ;
  text='3 * 3' ;
  Put #(line*3) text ;  *Write value of text at line calculated by value of line multiplied by 3;
run ;
data _null_ ;
  line1='i am line 1' ;
  line2='i am line 2' ;
  Put line1 / line2 ; *Write value of line1, then go to a new line and write value of line2;
run ;
data _null_ ;
  title='my report' ;
  Put @1 title overprint 
      @1 '________' ; *Write value of title and then overprint underscores on that value. This only works on some print destinations and usually looks wrong on the screen.;
run ;
data _null_ ;
  put 'something' ;
  Put _blankpage_ ; *Ensure that a totally blank page is produced. This means that if we had written even 1 character on a page, then that page will be written as well as another totally blank page.;
  put 'next thing' ;
run ;
data _null_ ;
  put 'something' ;
  Put _page_ ;  *This finishes the current page, causing the next thing we write out to be on a new page.;
  put 'next thing' ;
run ;
data _null_ ;
  name='phil' ;
  phone='824905' ;
  Put name= phone= ;  *Write the text "name=" followed by the value of name, and then "phone=" followed by the value of phone.;
run ;
data _null_ ;
  set sashelp.prdsale(obs=1) ;
  array my_big_array(*) _character_ ;
  Put my_big_array(*) ; *Write each element of my_big_array in the form variable=value;
run ;
