{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf350
\stshfdbch0{\fonttbl\f0\fnil\fcharset0 Verdana;\f1\fswiss\fcharset0 ArialMT;\f2\froman\fcharset0 TimesNewRomanPSMT;
\f3\fswiss\fcharset0 Helvetica;\f4\fnil\fcharset0 LucidaGrande;}
{\colortbl;\red255\green255\blue255;\red62\green107\blue181;\red0\green0\blue255;\red230\green255\blue79;
\red230\green255\blue79;}
{\stylesheet {\s0 Normal;}}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker }{\leveltext\leveltemplateid1\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker }{\leveltext\leveltemplateid101\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker }{\leveltext\leveltemplateid201\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\})}{\leveltext\leveltemplateid301\'02\'00);}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid401\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid501\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc4\levelnfcn4\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{lower-alpha\}.}{\leveltext\leveltemplateid502\'02\'01.;}{\levelnumbers\'01;}\fi-360\li1440\lin1440 }{\listlevel\levelnfc2\levelnfcn2\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{lower-roman\}.}{\leveltext\leveltemplateid503\'02\'02.;}{\levelnumbers\'01;}\fi-360\li2160\lin2160 }{\listname ;}\listid6}
{\list\listtemplateid7\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\})}{\leveltext\leveltemplateid601\'02\'00);}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid602\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid603\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li2160\lin2160 }{\listname ;}\listid7}
{\list\listtemplateid8\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\})}{\leveltext\leveltemplateid701\'02\'00);}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid8}
{\list\listtemplateid9\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid801\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid9}
{\list\listtemplateid10\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid901\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid10}
{\list\listtemplateid11\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1001\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid11}
{\list\listtemplateid12\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid12}
{\list\listtemplateid13\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker }{\leveltext\leveltemplateid1201\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid13}
{\list\listtemplateid14\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid14}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}{\listoverride\listid8\listoverridecount0\ls8}{\listoverride\listid9\listoverridecount0\ls9}{\listoverride\listid10\listoverridecount0\ls10}{\listoverride\listid11\listoverridecount0\ls11}{\listoverride\listid12\listoverridecount0\ls12}{\listoverride\listid13\listoverridecount0\ls13}{\listoverride\listid14\listoverridecount0\ls14}}
{\info
{\creatim\yr2011\mo2\dy27\hr20\min28\sec18\timesinceref320531298}
{\revtim\yr2011\mo2\dy27\hr20\min28\sec18\timesinceref320531298}}\margl1440\margr1440\viewkind1
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\b\fs36 \cf0 \widowctrl 

\pgnrestart\pgnstarts1 {\header {\pard\qr {\f2 \fs24 Mason {\chpgn}\b0 \i0 \ul0 \par}}}

\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 {\*\bkmkstart Title}Using Stored Processes with JavaScript and Flash to build web based applications{\*\bkmkend Title}\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f1\b0\fs24 \cf0 \expnd0\expndtw0\kerning0
Philip Mason,  Wood Street Consultants, Wallingford, Oxfordshire, U.K.\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural

\f2\b \cf0 \expnd0\expndtw0\kerning0
{\*\bkmkstart Abstract}ABSTRACT{\*\bkmkend Abstract}\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural

\b0 \cf0 \expnd0\expndtw0\kerning0
This paper describes techniques and ideas I have been using for over 5 years as I have built complex applications using the SAS Stored Process Web Application. The SAS web app enables the output from stored processes to be delivered in various ways, using ODS, including HTML. By enhancing the output with JavaScript we can add a lot of extra functionality, particularly interactivity. An easy way to add this kind of JavaScript functionality is to use some JavaScript programs written by experts which can be easily found on the web. This is great for adding a feature or function here and there. However a more powerful and structured way to do this is to make use of a JavaScript application framework. There are many of these used by most of the best known web sites in the world. I will be describing how to use one of the best of these which is called Ext-js. I will also describe how to make use of Flash objects from Stored Processes in order to deliver flash based graphics.\
\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural

\b \cf0 \expnd0\expndtw0\kerning0
{\*\bkmkstart Introduction}Introduction{\*\bkmkend Introduction}\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural

\b0 \cf0 \expnd0\expndtw0\kerning0
In this paper I will outline some of the most useful things that I have learnt while I have been building applications with SAS 9.1 using Stored Processes and the Stored Process Web Application. I have covered this in other papers and will emphasise some of the techniques that make use of JavaScript and Flash in the applications that can be built.\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural
\cf0 \expnd0\expndtw0\kerning0
\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural

\b \cf0 \expnd0\expndtw0\kerning0
{\*\bkmkstart Building_a_Web_App}Building a web Based application{\*\bkmkend Building_a_Web_App}\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural

\b0 \cf0 \expnd0\expndtw0\kerning0
In this paper this is what I mean by a \'93Web Based Application\'94:\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural

\i\b \cf2 \expnd0\expndtw0\kerning0
An application that is used through a web browser which lets the user make choices, runs SAS code to produce results and delivers them back via the web browser.\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural

\i0\b0 \cf0 \expnd0\expndtw0\kerning0
With SAS 9 came the new metadata based architecture, including the Stored Process. SAS delivered a Stored Process Web Application with this release which meant that we could run stored processes from a web page and return results to it. In many ways this was very similar to SAS/Intrnet, but it was designed to be much more flexible and powerful. By using this web application and linking together a bunch of stored processes we can produce a Web based Application.\
You can develop you application to different levels using stored processes. You could use them to produce an application using just standard HTML. You could extend it with a little JavaScript to provide some additional functionality. Or you could use quite a lot of JavaScript to provide a great deal of extra functionality. You can even look at including other web technologies such as Flash, Java or ActiveX into your HTML, which can provide an even higher level of functionality.\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural

\i\b \cf0 \expnd0\expndtw0\kerning0
One way to build a web app \'96 server side includes\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural

\i0\b0 \cf0 \expnd0\expndtw0\kerning0
One way to produce a web based application is to produce a stored process which takes a kind of pseudo code in. This pseudo code would define what a screen would appear as and what it is composed of.\
For example, we could have a selection box that would let us choose one option and was filled by getting values for a variable from a dataset, then this could all be specified in a piece of pseudo code. \
Example\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural
\cf3 \expnd0\expndtw0\kerning0
%select_box(dataset, variable, choice, 1)\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural
\cf0 \expnd0\expndtw0\kerning0
The stored process would then call the macro which carries out the directive in and construct HTML to produce that component. This means that to produce a page you just need to write a list of pseudo code directives. By building up a library of macros to interpret different pseudo code functions, you can extend the functionality a great deal.\
There is a book by Don Henderson called \'93Building Web Applications with SAS/Intrnet\'94
\b \expnd0\expndtw0\kerning0
 
\b0 \expnd0\expndtw0\kerning0
that describes how to do this in great detail. Highly recommended!\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural

\i\b \cf0 \expnd0\expndtw0\kerning0
Another way to build an application\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural

\i0\b0 \cf0 \expnd0\expndtw0\kerning0
This is the method I have been using recently. It makes use of the Stored Process Web Application to run stored processes through the web browser. One key technique is that when a stored process needs to prompt a user for input then it is written so that it can be run in two parts. The first part will build a web page which prompts the user for the required input and then calls the same stored process, passing in the selections that the user made. When the stored process is called the second time it can detect that it has been called with various parameters passed in, and it then runs to produce the output that is required. This basic idea was described in a SAS usage note and then developed some more by myself.\expnd0\expndtw0\kerning0
\super \
\expnd0\expndtw0\kerning0
\nosupersub \
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural

\i \cf2 \expnd0\expndtw0\kerning0
Example pseudo code\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural

\i0 \cf3 \expnd0\expndtw0\kerning0
If expected parameters are passed in then\
  Produce report\
Else\
  Produce web page\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural
\cf0 \expnd0\expndtw0\kerning0
\
One key part of this technique is that a stored process needs to determine how to call itself. This can be done by constructing a URL from automatic macro variables that are provided to the stored process. The following code is taken from a stored process and it constructs a URL which will call that stored process, as well as passing some extra parameters to it. It makes use of the automatic macro variables: _program, _srvname, _srvport and _url. It also passes two parameters in: graph and x, whose values are &type and &x.\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural
\cf3 \expnd0\expndtw0\kerning0
%let rev=%sysfunc(reverse(%superq(_program))) ;\
%let index=%sysfunc(index(%superq(rev),/)) ;\
%let rev2=%substr(%superq(rev),&index) ;\
%let firstPart=%sysfunc(reverse(&rev2)) ;\
%let html=http://&_srvname.:&_srvport.&_url.?_program=&_program. %nrstr(&graph)=&type.%nrstr(&x)=&x ;\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural
\cf0 \expnd0\expndtw0\kerning0
\
Once we have this URL built we can take it and put into an HTML form, which can then be used to prompt the user for various parameters and pass them to the web app using the URL. The URL can be put into the action field in the HTML form. When the submit button of the form is pressed then the action field is used to start building the actual URL. Other fields on the form are added to the end of the URL. These are then available to the stored process as macro variables.\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural

\i\b \cf0 \expnd0\expndtw0\kerning0
{\*\bkmkstart HTML_RTF_or_PDF}HTML, RTF or PDF?{\*\bkmkend HTML_RTF_or_PDF}\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural

\i0\b0 \cf0 \expnd0\expndtw0\kerning0
Another thing to consider when building your application is what you want your output to be produced as. You will most likely use a web browser for interacting with the user, but then reports that are produced may be required in HTML, RTF, PDF, EXCEL or other formats. Fortunately the web app makes this easy. You merely specify a value for _odsdest prior to calling the stpbegin macro, and it will then set the ODS options appropriately for the type of output you require. Since parameters passed in via the URL to the web app appear as macro variables, you can therefore pass a parameter on the URL called _odsdest, which will then set your output appropriately. That means that you can prompt the user for the type of output in your HTML and then pass that value through.\
\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural

\i\b \cf0 \expnd0\expndtw0\kerning0
{\*\bkmkstart Want_to_do_something_tricky}Want to do something tricky?{\*\bkmkend Want_to_do_something_tricky}\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural

\i0\b0 \cf0 \expnd0\expndtw0\kerning0
If you are building a nice interactive web page in HTML then it is likely you will be wanting to take control over exactly what HTML is produced. If you don\'92t, then you can get a lovely HTML page produced for you by using the wizard in Enterprise Guide 4.1. You can define a stored process there along with various parameters and values they can have. EG then produces a web page to prompt you for those parameters and then call the stored process. Very easy. However should you want to do your own web page, there are other techniques.\
You can use a web development IDE (Interactive Development Environment) to produce your web pages. This is reasonably easy, but reduces flexibility a little. You will need to code in to the page the URL to call your stored process for instance (and I should say I am not an expert web developer and no doubt there are 50 ways of automating this that I am not aware of). But once your URL is encoded you can use the full power of the IDE to build all the other bits and pieces of your page (or pages). I would recommend Aptana Studio for this, which is free and powerful.\
The method I mostly use is to have SAS produce my web page for me. The key to this is knowing that you can write raw HTML code to the web page that the web app is creating from your stored process as it runs. This is done by writing the HTML code to the fileref called 
\b \expnd0\expndtw0\kerning0
_webout
\b0 \expnd0\expndtw0\kerning0
. One trap to avoid is that you cant write to _webout unless it is free. It won\'92t be free if %stpbegin has run, since it will be being used by ODS. So I usually only use %stpbegin when I want to use ODS to produce some kind of report, and then I turn it off with %stpend when I am finished. If you produce a stored process in Enterprise Guide then SAS helpfully puts and %stpbegin at the start and an %stpend at the end. I usually then remove these so I can just put them where I want them to be. That means that I can drop into a data step anytime and write some HTML or JavaScript to do something. For example:\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural
\cf3 \expnd0\expndtw0\kerning0
Data _null_ ;\
  File _webout ;\
  Put \'91<h1>Make your choices and press submit to continue</h1>\'92 ;\
Run ;\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural
\cf0 \expnd0\expndtw0\kerning0
\
Another very important thing to point out is that if you use %stpbegin to start writing to HTML, then use %stpend to stop so you can write some custom HTML, then the HTML produced by default is quite interesting and verbose. It will start with an <html> tag for instance, and end with an </html> tag. This is fine if you are just producing one report in a single lump. However if you want to nip in and out of writing custom HTML and have SAS produce reports around what you do, then I have found an incredibly useful undocumented result type. You will usually be using a result type of stream which streams the results to your web browser. However if you use a result type of streamfragment, then SAS will just produce the HTML for the reports and none of the extra tags required. That gives us much more control over what goes on in our HTML. To use this you just need to set the macro variable 
\b \expnd0\expndtw0\kerning0
_result=streamfragment
\b0 \expnd0\expndtw0\kerning0
 prior to running the stpbegin macro.\
\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural

\b \cf0 \expnd0\expndtw0\kerning0
{\*\bkmkstart Stored_Process_Web_Application}Stored Process Web Application{\*\bkmkend Stored_Process_Web_Application}\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural

\b0 \cf0 \expnd0\expndtw0\kerning0
In SAS 9 we have the SAS Stored Process Web Application, which enables Stored Processes to be run from a web browser and then will stream the results back to the browser. This is the single most useful new facility that SAS have provided in the last decade \'96 in my opinion. This is because it means that SAS code can be run from almost any place. For example, I can go into Microsoft EXCEL and enter a URL which runs the web application and produces a table \'96 that table will then be imported into EXCEL automatically. Another example, at a previous client of mine we built a java application which simply constructed URLs to run the web application and then read the results that were streamed back.\
\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural

\i\b \cf0 \expnd0\expndtw0\kerning0
{\*\bkmkstart A_collection_of_useful_macros}A collection of useful macros{\*\bkmkend A_collection_of_useful_macros}\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural

\i0\b0 \cf0 \expnd0\expndtw0\kerning0
Any SAS application should have a nice collection of useful macros. If you are producing a web application then you will find yourself producing some macros which not only deal with the SAS environment, but also interact with HTML and JavaScript code. For example, the following macro will write a piece of JavaScript code to the HTML file being generated. That JavaScript will place a message into the status area at the bottom of the web page. Using this macro you can update the user on things that are happening in the background \'96 for example \'93now generating graph 27 of 50\'94.\
%macro message_js(text) ;\
  %if %symexist(_odsdest) %then\
    %if %upcase(&_odsdest)=RTF or\
        %upcase(&_odsdest)=PDF %then\
      %return ; \
\
  data _null_ ;\
    file _webout ;\
    put '<script type="text/JavaScript">' ;\
    put "window.status = ""&text"";" ;\
    put '</script>' ;\
  run ;\
%mend message_js ;\
\
I have many other macros for use with web development which do things such as:\
\pard\tx720\li720\sl480\slmult1\ql\qnatural\pardirnatural
\ls1\ilvl0\cf0 \expnd0\expndtw0\kerning0
{\listtext	\'95	}Produce selection lists of various kinds based on variables in a dataset\
{\listtext	\'95	}Produce messages of various types in HTML code\
{\listtext	\'95	}Write JavaScript functions to HTML\
{\listtext	\'95	}Read and write values of HTML cookies\
{\listtext	\'95	}Produce pop-up dialogs\
{\listtext	\'95	}Convert SAS data into a JSON data store\
{\listtext	\'95	}Convert SAS data into XML for use by an object\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural
\cf0 \expnd0\expndtw0\kerning0
\
There are also many other general purpose useful macros such as:\
\pard\tx720\li720\sl480\slmult1\ql\qnatural\pardirnatural
\ls2\ilvl0\cf0 \expnd0\expndtw0\kerning0
\dn2 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\up0 Drop variables from a dataset that only have missing values\expnd0\expndtw0\kerning0
\dn2 \
{\listtext	\'95	}\expnd0\expndtw0\kerning0
\up0 Calculate _type_ values for use in a pseudo summary\expnd0\expndtw0\kerning0
\dn2 \
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural
\cf0 \expnd0\expndtw0\kerning0
\up0 \
I also have developed a range of macros which produce nice HTML reports. These could be used in other places, but each of them have been enhanced to be highly interactive by supporting tool tips, drill down and special links to other functionality. For example, some of these include:\
\pard\tx720\li720\sl480\slmult1\ql\qnatural\pardirnatural
\ls3\ilvl0\cf0 \expnd0\expndtw0\kerning0
{\listtext	\'95	}Heatmap which shows a graduated shading of colors combined with traffic lighting for exceeded limits\
{\listtext	\'95	}Listing which has bars that indicate magnitude of values, along with colors that show traffic lighting\
{\listtext	\'95	}Gantt charts, which use an innovative technique using Proc Gchart\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural
\cf0 \expnd0\expndtw0\kerning0
\
A few useful macros appear here.\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural
\cf0 \highlight4 \expnd0\expndtw0\kerning0
%*** create an annotate dataset which can then be used to add an icon on a graph, which when clicked on\
     will call the stored process again, but will toggle the value of the parameter called zoom ;\
%macro anno_info(parms) ;\
 %* define the annotate macros ;\
  %annomac ;\
\
 %* build a link variable ;\
  %let link=http://&_SRVNAME:&_SRVPORT&_URL?_program=SBIP%3A%2F%2FFoundation%2F&env.%2Fbis%2Fmedmon%2Fanno_info%28StoredProcess%29%nrstr(&parms)=&parms ;\
\
 * create the annotate dataset to add the zoom icon with hyperlink ;\
  data anno_info ;\
    length function style $ 8 \
           html $ 240 ;\
    retain when 'a' ;\
    %system(5,3,4) ;\
    %slice (99, 2, 0, 360, .30, purple, ps, 0); \
    html="title=""Info"" href=""&link""" ;\
    %LABEL (99.2, 2.2, "i", white, 0, 0, .4, swissb, +); \
  run ;\
%mend anno_info ;\
/*%anno_info ;*/\
/*proc gchart data=sashelp.class anno=anno_info ;*/\
/*  vbar age / discrete raxis=axis1 ;*/\
/*run ;*/\
/*quit ;*/\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural
\cf0 \highlight1 \expnd0\expndtw0\kerning0
The following macro is nice since it will work out what the URL of the current stored process is, and then if clicked on will call that stored process again, but adding the _odsdest=rtf parameter to the end, which will make the stored process produce RTF output.\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural
\cf0 \highlight4 \expnd0\expndtw0\kerning0
%macro ods_button(ods=) ;\
  %if %symexist(_odsdest) %then\
    %if %upcase(&_odsdest)=RTF or\
        %upcase(&_odsdest)=PDF %then\
      %return ;\
\
  %if &bypass=0 %then\
    %stpend ;\
\
  data _null_ ;\
    file _webout  ;\
    %* REF001: Remove trailing # from URL  - START;\
    put '<a href="#"'\
           'onClick="var loc = window.location ; loc = loc + ''&_odsdest=rtf'' ; loc = loc.replace(''#'','''') ; window.open(loc) ;"'\
           'style="background:black;color:white;font-size:large"><button>Send to RTF</button></a>' ;\
    %* REF001: Remove trailing # from URL  - STOP;\
  run ;\
\
%mend ods_button ;\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural
\cf0 \highlight1 \expnd0\expndtw0\kerning0
The following is a simple macro which will write out a javascript statement which will put a message in the message area at the bottom of the browser.\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural
\cf0 \highlight4 \expnd0\expndtw0\kerning0
%macro message_js(text) ;\
  %if %symexist(_odsdest) %then\
    %if %upcase(&_odsdest)=RTF or\
        %upcase(&_odsdest)=PDF %then\
      %return ; \
\
  data _null_ ;\
    file _webout ;\
    put '<script type="text/javascript">' ;\
    put "window.status = ""&text"";" ;\
    put '</script>' ;\
  run ;\
%mend message_js ;\highlight1 \expnd0\expndtw0\kerning0
\
This is a similar macro which does a javascript alert, which pops up a message box containing your message.\
\highlight4 \expnd0\expndtw0\kerning0
%macro message_js_alert(text) ;\
\
  %* Bring up a Javascript message box;\
  data _null_ ;\
    file _webout ;\
    txt = '<script type="text/javascript">alert("' !! "&text" !! '")</script>';\
    put txt;\
  run;\
\
%mend message_js_alert;\highlight1 \expnd0\expndtw0\kerning0
\
The following is a useful macro to lock a dataset and keep trying to lock the dataset if it is already locked by someone else. I have found this very useful for managing a central collection of parameters which can be shared and updated by a group of users.\
\highlight4 \expnd0\expndtw0\kerning0
%macro locksave(_type=lock,\
                _member=,\
                _timeout=60,\
                _retry=0.01);\
\
   %if &_type=lock %then %do;\
      %* set start time;\
      %local _starttime;\
      %let _starttime=%sysfunc(datetime());\
      %* try locking until lock is obtained or until timeout is exceeded;\
      %do %until(&syslckrc=0 or %sysevalf(%sysfunc(datetime())>(&_starttime + &_timeout)));\
         options noerrorabend;\
         lock &_member;\
         options errorabend;\
         %* pause before retrying;\
         %let sleep=sleep(&_retry.,1);\
      %end;\
   %end;\
   %else %do;\
      %* release lock;\
      lock &_member clear;\
   %end;\
%mend;\highlight1 \expnd0\expndtw0\kerning0
\
The following I have found incredibly useful in debugging stored process errors. Sometimes you will get an error and not be able to get any SAS log, except by going to stored process logs, which you may not have access to. Just calling this macro at the start of your stored process will write your log to a location you can access.\
\highlight4 \expnd0\expndtw0\kerning0
%macro keep_work ;\
\
  %global _keepwork;\
  %let _keepwork=1;\
\
  %if %symexist(env)=0 %then %return ;\
  %if "%upcase(&env)" = "PROD" %then %return ;\
  %if %sysfunc(fileexist(/export/home/&_metauser/work))=0 %then %return ;\
\
  %* allocate user libref so that all work datasets now go to an alternate location ;\
  libname user "/export/home/&_metauser/work" ;\
\
  options mprint nosymbolgen nomlogic;\
\
  proc datasets lib=user kill NOLIST ;\
  run ;\
\
  %* Reroute log to same name as STP, or to username if not found;\
  %local proglog;\
\
  data _null_;\
    prog=symget('_PROGRAM');\
    index=index(upcase(prog),'(STOREDPROCESS)');\
    if index>0 then do;\
      txt=reverse(substr(prog,1,index-1));\
      txt=reverse(substr(txt,1,index(txt,'/')-1));\
    end;\
    else txt=symget('_METAUSER');\
    call symput('proglog',strip(txt)!!"_&_keepwork");\
  run;\
\
  %let _keepwork=%eval(&_keepwork+1);\
\
  proc printto log="%sysfunc(pathname(user))/&proglog..log" new;\
  run ;\
\
%mend keep_work ;\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural
\cf0 \highlight1 \expnd0\expndtw0\kerning0
The following is very useful since it will take any number of parameters passed to a stored process and convert them to a range of macro variables that are separated by something like a comma, so they can then be included in a where with an IN (for example).\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural
\cf0 \highlight4 \expnd0\expndtw0\kerning0
%macro html_parms_to_list(in,\
                          out,\
                          default=_:,   /* optional value to use as a default */\
                          sep=%str( ),  /* optional one character separator */ \
                          quote=0,      /* 1=quote values, 0=dont quote values */\
                          partstmt=0    /* 1=make part of where statement, 0=dont */\
                          ) ;\
  %global &out ;\
  %let &out= ;\
  %if &quote %then\
    %let _q_=%str(%') ;\
  %else\
    %let _q_= ;\
  %if %symexist(&in.0) %then\
    %do ;\
      %do j=1 %to &&&in.0 ;\
        %let &out=&&&out..&sep.%superq(_q_)&&&in.&j%superq(_q_) ;\
      %end ;\
    %end ;\
  %else\
    %if %symexist(&in) %then\
      %let &out=%superq(_q_)&&&in%superq(_q_) ;\
    %else\
      %let &out=%superq(_q_)&default%superq(_q_) ;\
  %if %symexist(&in.0) %then\
    %let &out=%qsubstr(%superq(&out),2) ;\
  %if &partstmt=1 %then\
    %do ;\
      %if %symexist(&in) %then\
        %do ;\
          %if %superq(&in)=_ALL_ %then\
            %let &out= ;\
          %else\
            %let &out=and &in in (%superq(&out)) ;\
        %end ;\
      %else\
        %let &out=and &in in (%superq(&out)) ;\
    %end ;\
%mend html_parms_to_list ;\
/*%let m0=2 ; %let m1=abc ; %let m2=def ; %html_parms_to_list(m,mlist) ; %put mlist=&mlist ;*/\
/*%let m0=2 ; %let m1=abc ; %let m2=def ; %html_parms_to_list(m,mlist,sep=%str(,),quote=1) ; %put mlist=&mlist ;*/\
/*%let m0=2 ; %let m1=abc ; %let m2=def ; %html_parms_to_list(m,mlist,sep=%str(,),quote=1,partstmt=1) ; %put mlist=&mlist ;*/\
/*%symdel m0 ; %let m=1 ; %html_parms_to_list(m,mlist,quote=1,sep=%str(-)) ; %put mlist=&mlist ;*/\
/*%symdel m0 ; %let m=1 ; %html_parms_to_list(m,mlist,quote=1,sep=%str(,),partstmt=1) ; %put mlist=&mlist ;*/\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural
\cf0 \highlight1 \expnd0\expndtw0\kerning0
\
\
\
\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural

\b \cf0 \expnd0\expndtw0\kerning0
{\*\bkmkstart Using_HTML}Using HTML{\*\bkmkend Using_HTML}\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural

\i \cf0 \expnd0\expndtw0\kerning0
Linking different stored processes\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural

\i0\b0 \cf0 \expnd0\expndtw0\kerning0
Another thing that you will often want to do in a web app, is to run one stored process and then have it automatically run another. The best method that I have discovered for doing this is to use some custom HTML. You can use the 
\b \expnd0\expndtw0\kerning0
onLoad
\b0 \expnd0\expndtw0\kerning0
 method on the 
\b \expnd0\expndtw0\kerning0
body
\b0 \expnd0\expndtw0\kerning0
 tag in an HTML page which will run some JavaScript after the current web page has fully loaded. This is exactly what we need to link stored processes. An example of this is in an application I have which links several stored processes together. This first produces a web page to choose a study and the user clicks on submit \'96 that runs another which saves the selection to a parameter file \'96 that runs another which loads a list of subjects in the study \'96 which runs another that loads a list of favourites for that study \'96 and so on. Here is some HTML taken from an application which will call refresh the contents of another HTML iFrame, which runs another stored process to update it.\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural
\cf3 \expnd0\expndtw0\kerning0
  data _null_ ;\
    file _webout ;\
    put '</head>';\
    put '<body' ;\
    put " var x = window.parent.document.frames.main.location.href.indexOf('cookie_save') ; if (x==-1) "  ;\
    put " \{ window.parent.document.frames.main.location.reload() ; \} ;"  ;;\
    put '" class="panel">' ;\
  run ;\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural

\i\b \cf0 \expnd0\expndtw0\kerning0
Get vs. Post method\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural

\i0\b0 \cf0 \expnd0\expndtw0\kerning0
HTML forms use one of two methods to pass parameters: get or post. I usually use the get method, since when the next page has been loaded you can see the entire URL in the address bar or properties, whereas if you use post then you cant see any of the parameters. When using an HTML form with a lot of parameters you may encounter a limit at which the get method can no longer pass parameters since it has a limit of 2083 characters. I encountered this when I wrote a stored process to build filters. After adding about 10 lines of filters it all stopped working. I eventually discovered that this was because I had hit the limit, and so parameters were just being truncated which produced unpredictable results. By switching to the post method the problem instantly went away.\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural

\i\b \cf0 \expnd0\expndtw0\kerning0
What happens when you pass many parameters of the same name?\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural

\i0\b0 \cf0 \expnd0\expndtw0\kerning0
With the web application if you pass in a single parameter, then it becomes available to the stored process as a macro variable of the same name. e.g. \'93&name=phil\'94 on the URL is equivalent to \'93%let name=phil ;\'94. However if you pass two or more parameters in of the same name, then you get a series of macro variables created. One has a suffix of 0, and provides a count of how many parameters there are. Then the first one has a suffix of 1, the second a suffix of 2, and so on. For instance, \'93&name=phil&name=mike\'94 is equivalent to \'93%let name0=2 ; %let name1=phil ; %let name2=mike ;\'94. The following macro takes a list of HTML parameters and puts them into a macro variable where they can be used with the 
\b \expnd0\expndtw0\kerning0
in
\b0 \expnd0\expndtw0\kerning0
 operator and a 
\b \expnd0\expndtw0\kerning0
where
\b0 \expnd0\expndtw0\kerning0
 clause.\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural
\cf3 \expnd0\expndtw0\kerning0
%macro html_parms_to_list(\
                       in,\
                       out,\
                       default=_:,   /* optional value to use as a default */\
                       sep=%str( ),  /* optional one character separator */ \
                       quote=0,      /* 1=quote values, 0=dont quote values */\
                       partstmt=0    /* 1=make part of where statement, 0=dont */\
                          ) ;\
  %global &out ;\
  %let &out= ;\
  %if &quote %then\
    %let _q_=%str(%') ;\
  %else\
    %let _q_= ;\
  %if %symexist(&in.0) %then\
    %do ;\
      %do j=1 %to &&&in.0 ;\
        %let &out=&&&out..&sep.%superq(_q_)&&&in.&j%superq(_q_) ;\
      %end ;\
    %end ;\
  %else\
    %if %symexist(&in) %then\
      %let &out=%superq(_q_)&&&in%superq(_q_) ;\
    %else\
      %let &out=%superq(_q_)&default%superq(_q_) ;\
  %if %symexist(&in.0) %then\
    %let &out=%qsubstr(%superq(&out),2) ;\
  %if &partstmt=1 %then\
    %do ;\
      %if %symexist(&in) %then\
        %do ;\
          %if %superq(&in)=_ALL_ %then\
            %let &out= ;\
          %else\
            %let &out=and &in in (%superq(&out)) ;\
        %end ;\
      %else\
        %let &out=and &in in (%superq(&out)) ;\
    %end ;\
%mend html_parms_to_list ;\
\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural

\i\b \cf0 \expnd0\expndtw0\kerning0
{\*\bkmkstart Persistence}Persistence{\*\bkmkend Persistence}\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural

\i0\b0 \cf0 \expnd0\expndtw0\kerning0
When I started developing web applications I looked at ways that I could have persistence of data, since I needed to be able to make some choices in one stored process and then use those choices in another (for example). I found that there were a range of ways that could be used to achieve this:\
\pard\tx720\li720\sl480\slmult1\ql\qnatural\pardirnatural
\ls4\ilvl0\cf0 \kerning1\expnd0\expndtw0 {\listtext	1)	}\expnd0\expndtw0\kerning0
Passing parameters on URL. When building up a URL to call a stored process using the web application, you can add more and more parameters onto the URL to pass information from the current stored process to the next. If you build a form in the HTML to call the stored process, then you can have hidden values on it which will then pass those values to the next stored process.\
\ls4\ilvl0\kerning1\expnd0\expndtw0 {\listtext	2)	}\expnd0\expndtw0\kerning0
Sessions. This is a method provided by SAS in order to pass parameters on from one stored process to another. The idea is that you put name all macro variables you want to save starting with \'93SAVE_\'94, and you put all datasets to save into a libref of SAVE. You then use the function stpsrv_session to create a session. You get two macro variables that identify this session and must be used to make use of the session in another stored process. One major drawback to all this is that a saved session must be used on the same stored process server that it was saved on \'96 this can have performance implications. We find that sometimes a stored process server will hang, and that would mean the saved session would be inaccessible.\
\ls4\ilvl0\kerning1\expnd0\expndtw0 {\listtext	3)	}\expnd0\expndtw0\kerning0
Cookies. One problem with using cookies is that you cant directly read or write a cookie from SAS. So you end up having to manipulate JavaScript which does the reading and writing for you. Then you have to get that information into SAS. Another problem is that a cookie is limited to 4096 bytes. This became a problem when I allowed users to build filters that returned lists of thousands of items which I then wanted to pass to other stored processes. I then had to split my data into chunks of less than 4096 bytes and stored in a series of cookies, which added more complexity. The final problem I found was that cookies just did not always work 100% of the time (using Internet Explorer 6). There were some cases when strange things would happen, yet my code looked OK \'96 and it would work in a different web browser. This unreliability ultimately made me look at alternatives.\
\ls4\ilvl0\kerning1\expnd0\expndtw0 {\listtext	4)	}\expnd0\expndtw0\kerning0
Saving data to files/datasets. I found this method to be the most reliable. I can write information to a dataset and then load it back in when I want it. A couple of key points that make this possible is that I save each users parameters in a different SAS dataset named as their userid. i.e. if the userid was U1234 then the dataset is called U123. This eliminates problems of file locking if I used a single dataset for writing everyones parameters to. Where I do have parameters that I want to share between people I do write them all to a single dataset, but I have implemented a locking macro since otherwise I would get locking errors. \
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural
\cf0 \expnd0\expndtw0\kerning0
\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural

\b \cf0 \expnd0\expndtw0\kerning0
Data Store
\b0 \expnd0\expndtw0\kerning0
\
You could also store data in a Javascript data store. This can be useful if you are extensively using Javascript objects, particularly for tabular data that will be displayed in grids or graphs. Such a data store can be written to a file on a server and then used to drive a javascript object directly.\

\b \expnd0\expndtw0\kerning0
Databases
\b0 \expnd0\expndtw0\kerning0
\
You could write any kind of data to a database which would then be accessible later. Since the SAS stored process is so flexible it means that we can call a URL to write something to a database and then be calling another stored process we can retrieve information from a database and format it in whatever form is required.\
The following macro has proved to be incredibly useful since it will get a lock on a dataset so that an update to a shared dataset can be made, and then the lock can be released for others to use it. Additionally it will keep trying to get the lock every .01 seconds for up to a minute. Calling it with _type=unlock, will release the lock.\
\
\
%macro locksave(_type=lock, \
                _member=,\
                _timeout=60,\
                _retry=0.01);\
\
   %if &_type=lock %then %do;\
      %* set start time;\
      %local _starttime;\
      %let _starttime=%sysfunc(datetime());\
      %* try locking until lock is obtained or until timeout is exceeded;\
      %do %until(&syslckrc=0 or\
                 %sysevalf(%sysfunc(datetime())>(&_starttime + &_timeout)));\
         options noerrorabend;\
         lock &_member;\
         options errorabend;\
         %* pause before retrying;\
         %let sleep=sleep(&_retry.,1);\
      %end;\
   %end;\
   %else %do;\
      %* release lock;\
      lock &_member clear;\
   %end;\
%mend;\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural
\cf0 \
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural

\b \cf0 \expnd0\expndtw0\kerning0
{\*\bkmkstart Stored_Processes}Stored Processes{\*\bkmkend Stored_Processes}\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural

\b0 \cf0 \expnd0\expndtw0\kerning0
Stored Processes were introduced in SAS 9 and are similar to a SAS macro, except they have some extra information attached. There are 2 parts to a stored process:\
\pard\tx720\li720\sl480\slmult1\ql\qnatural\pardirnatural
\ls5\ilvl0\cf0 \expnd0\expndtw0\kerning0
{\listtext	1.	}The SAS code, which is run when the stored process is executed\
{\listtext	2.	}The metadata for the stored process which holds information about the following:\
\pard\tx720\li720\sl480\slmult1\ql\qnatural\pardirnatural
\ls6\ilvl2\cf0 \expnd0\expndtw0\kerning0
{\listtext	i.	}Which server it will run on, which can be either a stored process server or workspace server.\
{\listtext	ii.	}Which users are allowed to run it, as well as which users can change the metadata for the stored process.\
{\listtext	iii.	}What parameters can be used, including any ranges, required parameters and default values.
\f3 \kerning1\expnd0\expndtw0 {\*\shppict{\pict\picw229\pich141\picwgoal4580\pichgoal2820\pngblip 89504e470d0a1a0a0000000d49484452000000e50000008d0806000000486ebd2100001754694343504943432050726f66696c6500007801d559675415cbb2ee999d377b9373dce49c73ce19244a5472ce6c72100101090a028a08280a2a222a8812258982221e44145430104482a81810149437e8f1dcfbd67bf7dffbf37aade9f9a6bababa66aa43550d001c2bde515161303d00e111b1547b53038a8bab1b0537052080050c0000096fdf98287d5b5b2b04ff87f27502e146ca23e91d59ff81e93f9119fcfc637c01806c11061fbf18df70045f070036f08da2c60280da40e8a309b1510846df453033155110c1cf7770e06fbcba837d7e610cfa178fa3bd2100187600f0246f6f6a20006421844e89f70d44e4908d00c03246f8054700c0e482601ddf206f3f0038ca111ea9f0f0c81d7c1bc1623eff2627f0dfb0b7b7cf3f32bdbd03ffc1bfdf05e9890c6c141c1315e69df4ebe1ffb20a0f8b43bed7afc288d4a488b05d3bb66145ae453f6f234be4ce8d5c3fa3c27ed90ce18138fd23763b20b41d2c15e1b3cbe66fac134035b14730d217b28d8a35d8c1c8378302a2626d1dffa6a7250719ee423009a11ff58f31fe23e77488b7c58ecd68117a3335ce7e37828510dc1713ef608c60644641af93831c9dffe6f9e2e76ff4371d8603824dcc7ff3c08cc1b1e63b6331233617088db4dcd101190b560196200cf883384045ea08200dac802130fabb960601c01b698947da6240287883e070a44724d22712c194bff90cff07c5e457bf40a4df7f974801be086fdc3f63fe1e8d828cf9476630f043f01fba3732c64edb8e76319ec199ff1af30fc78ebc5fdac835c82dc96dfdd1092d8256402ba30dd0da681db43aa0a059d19c401aad845643eba375d19a489b3a3001af11c9817f74dc911fde1c105f1e99a4e11484b4eebcbbcf9f56e0f48b3bf89fe7ffa101081e59695bf9a30100b1fe89c83a00c030322a891a1c18144bd14756aebf14c53cc257468aa220272fbfd3fcffa6ecec59bf95fd6cff6b2f82581ffc8b1689bc8cface1e73e05f34aff700b48520cb94f15f34913600e81400183aee1b478dff2d0fbd73c30022a043662807e00582400cf9ce0a400568023d600c2c800d7004aec003993f41c81ca48204900a32400e280047c0315001aa412db8002e8366d006bac04d300886c128180753601acc83b760157c059b1004e12032c40471407c9030240929406a900e640c5941f6902be405054211501c940a1d800aa012a8023a03d54357a10ee82634043d849e4133d012f409fa0ea36012cc0cf3c022b02cac06ebc396b023bc170e84a3e164380b2e84cbe11af812dc0adf8487e171781a7e0bafa1008a06c58ae24749a3d45086281b941b2a004545a5a1f25165a81ad4155427ea0eea116a1ab582fa86c6a299d014b434324fcdd0bbd1bee868741afa10ba027d01dd8abe8d7e849e41afa27f62c8186e8c244603638e71c104621230399832cc794c0b6600338e99c77cc562b1ac5851ac2ad60ceb8a0dc1a6600f614f621bb17dd887d839ec1a0e87e3c049e2b47136386f5c2c2e0777027709d78b1bc3cde336f034783ebc02de04ef868fc067e2cbf017f13df831fc027e93404f102668106c087e84244211e12ca193f080304fd82432104589da444762083183584ebc421c203e277ea6a1a111a051a7b1a309a649a729a769a2b94b3343f38dc44892201992f690e24885a43a521fe919e933994c1621eb91ddc8b1e442723df916f925798396895686d69cd68f763f6d256d2bed18ed7b3a029d309d3e9d075d325d19dd35ba07742bf4047a117a437a6ffa34fa4afa0efa27f46b0c4c0cf20c360ce10c87182e320c312c32e21845188d19fd18b3186b196f31ce31a19804990c997c990e309d651a609a67c6328b329b33873017305f661e615e656164516271624964a964e966996645b18ab09ab386b116b136b34eb07e67e361d367f367cb63bbc236c6b6cecec5aec7eecf9ecfdec83ecefe9d83c261cc11ca51ccd1c6f18213cd29c169c799c0798a738073858b994b93cb972b9fab996b921be696e0b6e74ee1aee5becfbdc6c3cb63ca13c57382e716cf0a2f2baf1e6f08ef51de1ede253e263e1dbe60bea37cbd7ccb14168a3e258c524eb94d59e5e7e637e38fe33fc33fc2bf29202ab05b2053a051e0852051504d3040f0a860bfe0aa109f90b550aa5083d0a43041584d3848f8b8f01de175115111679183226d228ba2eca2e6a2c9a20da2cfc5c862ba62d16235628fc5b1e26ae2a1e227c547256009658920894a890792b0a48a64b0e449c98752182975a908a91aa927d224697de978e906e9191956192b994c993699f7b242b26eb2c5b277647fca29cb85c99d959b926794b790cf94ef94ffa420a1e0ab50a9f05891ac68a2b85fb15df1a392a492bfd229a5a7ca4ccad6ca0795fb957fa8a8aa5055aea82ca90aa97aa956a93e516356b3553ba476571da36ea0be5fbd4bfd9b868a46ac46b3c6074d69cd50cd8b9a8b5aa25afe5a67b5e6b405b4bdb5cf684feb5074bc744eeb4cebf2eb7aebd6e8ceea09eaf9e99dd75bd017d70fd1bfa4ffde40ce806ad062b06ea861b8cfb0cf0865646a946f3462cc68bcdbb8c2f8a5898049a04983c9aaa9b2698a699f19c6ccd2acd8ec89398fb9af79bdf9aa85aac53e8bdb96244b07cb0acb592b092baa55a7356c6d615d6afd7c97f0ae885d6d36c0c6dca6d4e685ada86db4ed0d3bac9dad5da5dd1b7b79fb54fb3b0e4c0e9e0e171dbe3a1a3816394eed16db1db7bbdf89ce698f53bdd3bab3917389f3b48baccb3e9761574ed760d776379c9b93db79b7357763f763eef37b94f7e4ec99d82bba3771ef9007a7479847b7279da7b7e7352f8c97b3d745af2d6f1bef1aef351f739f2a9f555f43dfe3be6ffdf4fc8efa2df96bfb97f82f04680794042c066a0796062e05e9069505ad041b0657047f0c310ba90e590fb509ad0bdd0e730e6b0cc7877b85774430468446dc8ee48d4c8c7c1825199513351dad117d2c7a956a493d1f03c5ec8d698f65469cc3fb716271d97133f13af195f11b094e09d71219122312ef274924e5252d249b249f4b41a7f8a6f4a7f2a766a4ceecd3df77260d4af349ebdf2fb83f6bff7cba69fa850c624668c65f99729925995f0e381fe8cce2c94acf9acb36cd6ec8a1cda1e63c39a879b03a179d1b9c3b92a7987722ef67be5ffebd02b982b282ad43be87ee1d963f5c7e78bb30a070a448a5e8d411ec91882313c5bac5174a184a924be64aad4b5b8f528ee61ffd72ccf3d850995259f571e2f1b8e3d3e556e5ed27844e1c39b1551154315e6950d958c55d9557b57ed2efe4d829bd5357aa79aa0baabf9f0e3efdf48ce999d61a919ab25a6c6d7ced9bb34e67ef9c533b577f9ef37cc1f91f751175d317ec2fdcae57adafbfc87db1a8016e886b58bab4e7d2e865a3cbed57a4af9c69646d2c68024d714dcb57bdae4e345b36f75f53bb76e5baf0f5aa16a696fc56a835a975b52da86dbaddb5fd618745477fa76667cb0d991b755dfc5d95dd2cdd453dc49eac9eeddee4deb5bea8be959b8137e7fa3dfba76eb9dc7a7cdbeef6c880e5c0dd4193c15b77f4eff4ded5bedb35a431d4714fed5edbb0ca70eb7de5fb2d7f29ffd532a232d2fa40f541fba8fa68e743ad873d63ba63371f193d1a7c6cfe78787cd7f8c389dd134f9fec7932fdd4efe9e2b3b0671f27e32737a7d29f639ee7bfa07f51f692fb65cd2bf1578dd32ad3dd334633f7671d66a7e67ce7debe8e79bd359ff586fca66c816fa17e5161b16bc9646974d97d79fe6dd4dbcd959c770cefaade8bbdbffe41efc3fd5597d5f98fd48fdb9f0e7de6f85cf745e94bff9aeddacbafe15f37d7f33738362e7c53fb76e7bbf3f785cd842ddc56f90ff11f9d3f2d7f3edf0edfde8ef2a67afff20550480d070400f0a90e89215c91d861140062dfef98e2170712ae40080f827188a760817800739004726ef7c11c702c3c893247dd429ba21f63c2b10cd87e5c2a5e878023bc2076d054918ac875b4cfe9e9192c19f39886581858f7b05de240737a7375f350780ff16df0fb094c0aed121e1295152b147f2b692e552dfd55d650eeb0fca82259c9403946a54ab54f6d5afd87269b96a4b6ba8eb1aebd9eaf7e8c4196e171a306e35e9347a64b66db162c96525686d6eebb826de26db3ed4aecab1d1a1cdb90553fec3ce6f2ccf595db9cfbe29e777b173d9e7b8e78f57a37fa9cf23dec97ec1f106017a81924144c1bfc35e455e860587df8e188a8488728d568cee82deacb98bed8dab8ecf88004f344c92462d272f2fd94a6d4f27d596909fba3d3a919c999f907ce647567bf3a48c8d5ca8bcaaf2d98384c2cd42a0a3f72aa78a4e4c751a963ee65f9c75bcba72b682a95ab3c4fe69d6aae9e3a83ae91ae753abbffdc85f30feb36ea2917ad1a522f355ffed8a8d15474f5c335f7eb0f5a6dda1e776875c6dea8ef7ade43d3abd8e77433ba3ffb56f1edb281b2c1e23bb9770f0c1dbc7778f8f0fdecbf62479c1fc83cd81ced7b9832a632f6f5d193c71de31513fb9e783e3578263c49987c37f5f079cb8b8a97fb5e794d1bcd88cfd2cf7e9b7bf37a627ee8cdcd851b8b1d4b1dcbe7de16aec4bff3786ffc4172957e75ede3e4a79ecf67be64af057db55c97dd60da58fff6fc7bdf66cd56d60fff9f46db02dbdb88fdb18013f10e13c100e2d1594147a057b022e27b7d4679a22610afe905260a4b8b6dc3f9e339f193842a62208d01499bec481b44974e7f9ae126e312330b8b116b125b23fb074e192e2a77172f0d9f13e522ffb6a0be508670afc89698aa7888c449c961a94f322cb28a7266f2ee0a818ad14a49cafb54925543d4dcd5ad34b435e5b404b45974f03adf75dfe9cde88f1bdc33ec31ba665c67526e9a6b96601e64e16a6966a5662dba8bc5066df3c576d6eea17d9f4393e3a9ddb94e31ce1e2ee6ae8a6e3cee58f7f7c84edfed51eb99ef15e9ede8a3e44bf29df5ebf02f0a0808d40a62087a137c23a438d43f4c239c2e7c2ea22d3237ca355a1299172331a763a97186f12cf10b091d8987923c92e552e09427a98dfb0ad2c2f7ef4e37cad0c8543fa09d6596ed921371f060eeb9bc5bf933053f0f7317aa17391d89293e5272a974e8e89b32f83877b9ca09bb8af0ca82aa4b27474f7d3d2d70c6b6e6406dc7d98fe765eaa22f5caf5f6f50bf947ab9a71134e95f3dd03c701dd362da9adb76a703d7697c23b3abbbfb4baf489fc3cd94fe53b76edc1e1f581a5cbf8b1e62bac73f2c7b5ffb2fab11b70741a3090f73c68e3daa79dc38de3531f464e2e9fcb32f53a8e7cc2f845faabdb29a0e9ca99d5d7a2d3aeff62667e1e2e29da599e58d15da77c2ef753fb8afa67f1cfdacf8a574edf3bafdc6f5efec9bd95b1b3f137ed91f8de44e24c02e900efa10bf5e038a85da6018b6864fc39b280fd43db416ba15a386e9c7da62e77029782efc1dc261a22f8d16898bf4933c4b3b4cd7427f8ea19cb1902997399b2587b580ad94bd9aa381b39dab9bbb9ba787b797af877283bf45a041f0a45081709cc81e513d310171203e25d1265920e5244d915e9669914d97b39467959f5168508c53d25526283f5239a91aa4a6a4b6a1dea391ad69a9c5a835a95da313a2aba0bba537a85f6cb0d750c270dde896719189bba9a8e927b31ef37c0b274b7ecbb756add6e9bbac6c586d666c1bec62ec351d60877b8e25bbdd9c284e0bce575ce25c35dd60b721f7a23d0e7b59f73ef3a8f4dcebc5e3f5c2fba4cf5e5f6edf49bf727fa700a68007810541c6c100992ff1a1f2a12b6175e13e11dc114f224ba37645e3a36f52936314635662cfc579c4b3c53f483898a89bb891d4941c9c424979967a749f631a47dafcfef6f4a31949990107f664b966bbe7f81f8ccbcdce2bcb3f5fd07a68f0f078e17cd19762540953a9c051b9631a6586c72dcaed4eb856f8544656ed3f597aea52f5f0e90f35c2b5496747cf8bd6a55d98b828dd907569ea8a7c636ed3cb66956b05d75fb52ab61d6c7fdea97823bf6bb647abb7bcef6bbfe3ad9601d1c1b377a587068643ff121a5919bd3376f571fd44d3d39b932f5e8057723375af7316f297dbded37dcc5d63df68d972deb1ffefdcd2ce99805501e0dc1c004e6700b07307a04e1200e14a246d82e43b6cc90038aa03d8a00840cf4e00c8f4ca3fe707198822517e003888448e43e02d440bc943bba164e824d4054d415b487ca70bfbc039f045f801fc05c585d24705a18ea03a50b3681a247fe0854464ede8d718468c2e26027306338e2562f5b189d866ec0a4e0c1788abc32de165f071f85e020dc18d708908115d88cd34b4341134632435d269329e4c25bfa4b5a0eda013a3aba027d367d0af334422f18a2fe32b261fa605e670e6af2c19acb4ac27d964d96eb1bbb3af711473ca733ee24ae0e6e11ee539c86bc007f86e52b2f9ad05380416056f08150b878898880a8b91c4d6c46725c6246f4b754a5f9369926d946b966f57e8531c567aa9fc5115adc6a22ea821ad29af25a72da143d165d483f53ee84f19f41ad618e51a479ab8981a98c99af35ad059a22c37ac56ad9777cddbccdaced8bdb67febf0d9f18713c199cd45d455ddcddadd774fcade631e4dc839f6ce87d657d1cfd57f7f406de040d05cf08f50c630fe7089089948e928f168012a6b0c21e67bec523c6782756256526ff2cf54e37da5696fd3ad336e1c50caeac8313f389777b080ffd09542bda2e9e2e2529763dac7cd4f24540e9ce23a4d5b03d77e3bf7a9ee7dfd4ac3cae50f8d6b577f5cc7b772b5cb761a75b9f604f7c5f7a7dd4e1fdc7737fe5ed87daf9182d1f6b1e571fe277b9f554fbd79293f9d313b3e2fb990bbb4b062fafee247facf296bef3602be2ffc88fab57fd00119608764a32a402f780dd120d90077280b89f887a10f4874af017bc1b97013fc0c85426276575436ea2aea159a8cec2aa1e84af45f48fc2d8ff1c3542176a7c35a61f3b07771449c35ae04378917c653f1fd0456421861902848cc24ced358d074922449d56416f2215a2c6d261da0cba047d1e732d0321c6714606c64d2631a670e67c1b2d4b0eab3ceb2e5b04bb34f706470ca714e7395729bf1a079fa790ff09950489409fe1a81184113215ea10de1099136d1d362c7c58b250a250ba54aa42b64cecbb6c8dd957fa9b0aec4a2aca1e2ab5aa8d6adfe415358cb53bb52674a8f57dfcfa0d170d3d8d8a4c074d81c63a16ae96395637d7ed74d9b49db557bb403aba3c46e3d2757e7189722d72b6e23ee1ff7b27a687b0678157bf7f8bcf713f47709280a1c0cfa11a2141a1c762afc61241ca510ed452d8cb911bb184f97a09ae8955490dc9eb2b08f2dcd7cffbef4e68ce50382597bb32b729ee6b2e5b9e69f2a787d58ba30b168b098bd24b2f4fe31b9b2ca72da137995a4aa63a744abef9c09ae259d6d3eef76015ddfd4e07999fecaada6c466d96b8b2d756dc11dd29d9fba3a7b32fbacfad96ecd0d34dd491db218e6b83f3ab2fbc1dcc3e447bc8f47260a9e3a4c8a3c875eccbe1a9c69982b9aa72e382c712d57af88bebbfa416775e493e7e70f6be9eb741b27bef36e56ffe0fc59f4cbfe6c401f442199a307601bb17d0074021a803ec302b03d92c3698357905c8d0bb2de87d0282487988c6e43af619431f1986e2c066b83adc42ee3347147708b7823fc59029e1045784eb422f6d1a822963620dd27bb929769d3e858e89ae86de83f329431ea302e319d64766021b3dc63cd63b36267649fe438c749e5d2e766e27ecb33c87b962f8712caef28a02fa820242acc27c225ca29461197945097b494f2964e95a990ed967bad40aba8a54455bea2f2414d593d43634c4b4c3b4be78d9e957e9ba1a4d159137ed35a73718b162b23eba736517624fb26477764bd76bbc6bb2bedd9f0e8f33aece3e1a712400a7c165c116a1eb6149114b9151d4b9d8fb58dbb96c090484d7a9ca2917a268d667f62fa42a6cb81fbd906399db94a79ad05da87860a5d8bde16a795321cad29933dde7142a7a2b74aeb646b35e6b4d5996335afce4a9c4b383f7081a53ee062e725dacb7e57ba9a58ae46350f5f1743229f77ed761d6d3778bb72badff73af7ddec97bc75ecf6f660c89dc7437af71aeeb3fe1533726f94eb61d0d8a547cbe38213ce4f329f5e78766f727e6aeb05fd4bbe5792d3ca331ab33a737aaff5e675de682ca82eca2f492c0bbca57dbbb4d2f12ee1bdf2fb950fe7565d3f123f767d0af84cffb9fdcb9e35b056f3d5e0ebecfafe0dee8d8e6fbbbfad7e3fb429bad9bfe5b1b5f1a3f4a7eccfa16dbf1dfbc70428227948a440240324fdf8727bfbb30812549400f0a3787b7bb3667bfb472d126c20ff40fac27effafd861c62239f72a84febf97ff02da627eef21425f3f00002000494441547801edbd69739dc795e77980bb5fe062df081020c07d91486d945ab264c976c92ea9dc8eae28bb5cd16e47bde8e899888e79d5d12f663ec5cc9bf9003533ed89ae8a8aa9f62297659755926c591bb590e2be83c4beaf1777c5fc7ff9dc07b800418aa20009b87c92bc78b65c4fe63fcfc9932733aba627c7962f5cbc60b144ad150b052be817b82f4f0168f9e1471fdb0b2f3c6f8b0bf3565555b526529e17e617ecc2a54bf6f4534f5a3ea0fb1afa3c6c0fa150b58d0c0d58aabec5c2143e9d2d5a6e396fc5e500949bd5188a45d1b418b2b974ce963274747782d2d15d7ee697f2026571b3920ee2d9811408858a56282ebb9c57cd4c8d2fffef3f7bcb86a6721656ef5dde34aa5c435a36bc72efdd79f7f753ee15ff8a7779d94b90705ebcf713c3cef653143543565da2df9d6581229e9f90ee56e973a7cfe04da553a04a9cf2c9aeac1de8edf238e5cc5cc626a7d3561daab2907eb62c700a44f4f68859f4f180aaaaba9a1bf7ed7e88e4c212a4b06cd555d50a2f70aa37282c9743ff7e62c28fcbc5fd7ade16feee27c7f7e3675b1426c8c4965240c8b37c7b4878330f944b99259b5b5cb29a44c41ee9db6d0b4b191b1c9bb6c9f98cc56261dbddd660576e8d5b5b63ad6572799b5fc858241c1280abdd58a828a0550b703c1704649822804ed5c4acb1b6c6aede1eb3037bdaaca9aec62667e6edd6f0b403280d12ac1504da72ae1a261e8973d58e73ab3310a0e129f9fc8380794b6919441e5060532800032b14932eaeb0078a82657359ab1328a3912abb3a3063110163777b8385c51d8fee6db79b83e3968c47dcb87351203ed4d16edded4d3621900d8e4edbae967a8f9929f24c266f976f8ddad3477baca13e69576e8f5a6d226a0b8b696bd473937e2313731617e0e1c370e54cb640562c297f09bd9f9c5eb46432e6be35a51276559dc2c0e89403f3a650218824a0c036a2405575a8c498aa348c54c6e666666d6672d222c5259b9949d9ccc4b8b865cebef56f8ed9a9b3d7ac984fdbcdfe5b561797c6703163b9c5395bce375821b76811cb5a4763dc62a182bd7fe69a1d3f24200adc4bf333e27619fbe8f46da7555ae8acb359691b5b9b1b9c283c343c2cce1cb72529428e1decb2682aee38e2d8c4b4cd2c2e5b532a69d12854abb2d9d9693b7de1923a0ac65e810b28505914409b000e0b593050125f97a5755d2e16c4ad7296cb17acb6266e9168d8ce5fb965558cffa4996dac4bdaa2385d774793137325603a517444626e4b739d7d7cfe961de86e13a8e76c4aa93cbabfd3a6a7c50da32171d898cd2d2c8a0b476c766ec1d2999c8d8b53b6ed4f39ee7bf6f22dab173744649d9368dc2231d9e6972d9bcd3bf5473a93d5b8b46045721eb88002154801c4d7e52a4fd917e6128f452c914ce8aeca4e5fbaed8d157305816746f7219b9c5d128243363eb3680b02545163c0a131143e2600c72c373a2b3065edfad084809d77caa0443c6a8b4b598b86c31a97c6ecc6d094c4d28803e4b2c69b61c57b7d60d2f50c59c5392171957125e3c8b4e2482b6c241496f2c91c38eb3436ddaece23a5d7db6dd73c06f9dabe14a0fda008e5873e260c2baaab4b59cba21435614fbbeab21f13e0520202be3ec709a3d6ded6e4fcd6786355172221f174bd8b8b6b3a079ff6e34e95dd97de27cbc38247de6f5357552ac7f236cee336255d90ad1205989940798a0ba364f9def38fd96c36ec34a7dbb7e99772bf9d2e104b1d5234522db1df3c030007d0cfa1a2c4146fde97c27c7ea7070f0ef0be9d2a7e33f342fd5759ad24cbe5d92b6ed6c259f43c72688fcd1592d26c9a44c65283ba575b2935c695acad7f5ef9b0eee67efdad0bb65d1f29ce42a668b5b12a9b93554e565336febceebdf28cd84f58e6849772fe34cfdd8913970413452577af3ab95782c1b7ed4b0155ebfc52c17ada9276ee83db02e5b2374f999772279bcf5b5815af297e5700d744bcdb3505a2c72ee6bd7949ff83b305d8c0afffddbb129039c7ca695b6e6e494a32e9c72ca73138653bbea7ce5d0ba269b5a6951823973b70c5aceb858179cd0d17a4e092882fee8ac4b221a0157e5e1aef54c2f59fe55105f715400178e0fc62517a13295b9d9455d2be52369e73eae987c6e66d219d7173941804a0109239c04a83a9d6bce5994b83ee7b7d5dc241787064c6ba3a344522ed290d0bc75f174e7734cc85250c14b2d6de9cf22c7cd46077baa3a819d90d27922107aa905e4887e518da2fdfbe60bd9d4dd6d99692f411b14c3e673129bd6a35f70a0dc3aa8dbc3c8744e3a22ca82e5e1bb4064d0335cac0820830c4884664a4a734e0ac79e671773ec9767a956f7afe0bd42ff87288f1a25fe97e0b42e5fc52d17ef9d63907d0c78e74db95ebc34efb4a638846c2ce28202c51ea9a26f29b1b6a2da1defbb9c70fda3fbdf199fdcdab27edbdd3d71cc708a9d1219a65c53d407faa3661b7a47dcd49abdab7bbd9b0f37bead13e273f6f7a29bfe208b3921a1a054a3a350c8e16258e02a2dfbe7fc3feec9990bdf6c7cb0e78181bb736d6d8bffffe13b62c80118e0e8c29233ac389c979d7a98d8ccfd8cc7cda4e1cecb68676196428e22af58cd44f55b080e72baeddad4f8e8e9df65286494f7c7549d3a824721d5763f8e3a94b76eed280dd1a9976d635cd9a375c4ce7edbc7a73e62989686c72d676ef6a71a06352ffc6e0945dbd392ea0466d626ace0ef675d8b81a5a561a90e8d482e62717adafbbd5a6350f393db3602705ca073281dd7a3add770a22c31a07303533e4a68c4e1ceab2fd7d5d766d70d6713c5681446309490c9e051315e18bac9815b635d75a2c1a71d34870d3d6a61aaf9e446ce89457005f0a599368f0b0a32980f0e38bad7e41aaa6b49e7272be6893b226600911f383d8ad46243a2da635cf280e892805e7fbf4fc6deb68a993554e9d1b9066733927724d0b70886444ce5ccbe5fe117bfc70b7ebf193b2ee5994d50ef39df4fab8b054bf3589d81d99f133b553ae481088af5d8d519b9ed7d237657cb7b81bf6bf383a2f447acacb3a55cfa05fa2a96835a18e697a2e2711b7ce89bbf8e33db467d8e0021387fedd1e9bb39af0ead0c0451efca9180acc4a42ed6dabb54b1fffabe6f4e3659c5245647cd3ac71225d343d79a3c44ee45db044e378f1a9030e488edd4292aab8f3d7a171222b4b7c8b84b6c6bd12b73477d92ce958efeb92cc57eabb6b7e1e363d78aef21a5fa6f6fd10fd7677e43e5fed9504ae9796483a235659c26459f63d908aaaee9db0a7ce8ff596cb32c89061067401c1e5aed48141b7ac805fe5827a69957b0bee773605a875862f42c54a4156c6944c8534b5c42d4a8bf19dc632c5dc92435175d403966b3ffaee26ca57e3a1edacc6ab7b26d42570adbe2fffeec75f7ee53bae3c4eefcdb6fe8b74817c09170c497b3d23f1fcbe9cca5b13d7385de3cbcf73f118c6ca81ab440a50af2c6d2caf5f074a3a65b8e49e66714919912f4b2e0b8723b69c99b6d9db7f14774c5b2475d0aac3719bc9d6dad0f0901dd8bf5f2affc88ad85a907631128dc9883c6a9f9d396d8d8d8dd6d6de61d39313d6d4dc2c9bd8696b6e6993fdeca21b1b85a58944a443e4e53ead2d33c85854ec3b1ec730d747e9f6ae8ae9c5900d4da4b59ac6ac21a9291044cf152eb7bdf31ee4ee6ba400cd5b5224ed666c4e9cb20c952b9c92ecf17e62624a4a9939dbbb779f6566072d52336a91ba7aa9e4cfdad88d09fbe87a97f5dfba659f7d76ce01a7a3a343e255d69634e5d1dada6a8f3df698bdfedbdfd9934f3e6923a363f6873ffcc17ef8c31fdad9b367edc5175fb45ffce217565353635d5d5d363e3eeec2eedebddbde7fff7d6b6a428954652fbffcb2a5521289778063b217471f121585a717f31a8fdf478742b0fbf0e6220ffe541c05a8faac34f5f549e96ce8c8cbdc1a50f21e310ca50d63243866d5e28855e527c5cdb42e440606c99a94f5f4f4583a9db6a1a121676c8effe9e969ebecec74dc6fd7ae5dd62cee383232e2fc62909ec964ec9236899a9d9dd5b48956a3e8575f5fefc07ce5ca155b5858b0bebe3e9bd41232beed4407cdf2fad5cbf0feaecc52bd2393bf012677620d6f5e9ee9c4f3c58df76672dad709b1cfb425ed60578d5669651d28235a66955d9ab6b1f3ffc3b20b73525e68e9546db7b5ef7f59c09a715c11603a004bb301f0e6e7e7ada5a5c5c6c6c65cee011d60abadad756044b388688a834bc22d1167115fe1b65c01241c937877829b9ccfd9c8d492cced649da35e6f624e1d97d69d2e694e36a2f2602555e59460686af31ad4ab22a4106ad6426fd7f105ec722754f3a6e711502e481f511f6773b582b5d6c7edf2276fdea97da577075cbe8bc6ebade3d11fbbc653a5f16308cea95f8d968230c551ee97308904cbbfccdadadadc953fbe1fc05aeeeaeaeadca3ffbdfcdb4ebd4708c94a9c9d1859b45fbcf1a91dec6d97c140edcaea9bd31707dc54d0b8d699fef9371fd5745262c7cfd5eed4bafabaf30d28b17b0694ebdd1de26b5e0a1b063b70ad7c66cee606ded360530b94eb8fc868336a91da4e1b1c1c749c12ae9757cf8fc206f13499f4d66df10e850fefe0b800180ec83d8a1dfcc309f94d4d4d69e9589df3439a3bda89d23971c139edda90d434d03b1f5f9335535ca27e5663e4849b87acae0edbb4d6a7bef1de157bf55bc72521ec4c517d47d7d336c97c9e794373db6bacc9d11a1430e09c189b703b0cecd9d36bd939297ae20302629d4ce43e96a267dc260b4fbbe910c67e286c6e49e983280ae8f6ecd9e3c6888c359f78e2093711ced812b1f6f4e9d376f8f061e76f6666c6811630befefaeb4e2904773d76ecd89accedb8077538b2b3b04601f0e5e78eca6822235be269757021abaf957421fa626871b0af4db6afd2706b8eb32aba33c4f41d5717db3cc34855991ca0bcd3ad01259f114f011816260409e5472cb434eb7600b0625a1e421a17c6346e1cb58b172f3ace4738b821e3c7ebd7af3b250fe34a44d6fefe7e376e4499532ef2f21ece8996957000b5121cc4aed76e0c88274df509ebe96c74c5626b4de8d95bd5acbfbad37f76f18326817bf828403b414fb3915b034a140fa954add38a6266574cb6d8f8cd3acb2fca585a4a9a4cacd34e3c75c206066e5b77f76e9bd3d4096342c455444fc4d5679f7d764534657ae3f6eddb76f0e0417bf4d1471df0984201802881b8fa22ab3f1edd28933be95d445aea44cc5f005796731967acbad2fdfd4c9dac060aee2a8902340137154257bdd6add1be1ee8acd1f2a2f2c6c33ac1aca642246669fc17d29e3968133dfbcc2f27761107a0dd2946026bc9b6fa54ae7d4d25b4d44a743ab08bfd4b021750e0de14189fcbcacc32736fedab1f05d3138045ea19cb8c9f91a4a5e98a44af2d4b03bb1c6f9681c184b3d8f1fd03307e703d5f89c33d1c14a302b829621a4a1e17afee198b62f5c3b894f784c7714fc3e68a184d3c7e589447810b2850e9145823be525840f5eebbef5a5d7db31deed2a123d90f4dd6753637f491cd4d56d962ea2567f183f889c100c0634cc80fa50e20043c181030bebc79f3a63df2c8230e987c4343bb6fdf3efb877ff80767e1d3d0d0e00c113034008cc4c7bc2620655c0a681179118d4f9e3ce9fcec944aa173a373f13b13ee7dc9c0bf524eff9eefd09f4e88773ce3a0891fc74e297b90cf07a7c01a508625e38e8f8ddbdffffddfdb4ffec3dfaa51c84eb57a468b6b63da86523ba18f8d583af4aca643da3456bce5ac6f183362c973e3c60d0724ac765e78e1056736c73b40874208900e6b03e6fdb299652c89491e4a9e0b172eb846f8d65b6f699cdaedde637277e0c001076afc00481ae6e38f3fbea31ae7679f7de6c6dd689d7194834e862be54282408bed8392f768aeb198f22507804de7f4d4534feda80ee9c19b641072cd98f2a0c6945a16e2b81ed315cbf9051bb9f07f59415cb0a00d99c766c276e23bff4560b9ea444f4ce6001d8d0aa50f0d89864683c352871f3d3f9c8f6911c45534aef8b97af5aa9b9fe41b1c144e4b9a70cb8f3ffed87153be11871fbeb7b777a5016f97aabbd798f2934f3e71a68570b9d1d1519777e676911e9e7ffe796764010829fbc0c080b5b7b73b6d35534b746e745c8485ae3ff9c94f5ce7b55dca1de4e3cb53e0bec694084b3135821551295467cd07ffa31bdb91854eade00869f5c8defd87d550a4a96d68b3983488cccdadb7d841bcbd9743a4bd9bfbee77bfbbe613621c0d74a7394475e8c2b8980e874e890e882b52019d131d1b575facf7c7d97444941951960ecf176b771a0d82fc7e710aac115f370a1e97e91c3fdf5d195cb2e1298d23b5b5e2e45cc19e3e18d7aae9e80a70694438381e3d3c8d09ee88d2c67fcf338d936910dec3697dff00903810dbfc2b5c96f1aa3fc6e2ca8fc6bc9d1da23ad341f772ac9029777d32ca0fdcc34d81cf05e57af24c6b5de4998fcf59ebae1ecb14123631bea83df216ecfcc54b8ec3629903c8000c06eb6859195321ae023c380263c38f3efac89e7bee3977059c808ef1156044b173ead4296721c43bc654cc730264808ab887bf679e7966c5c07d7d3eb7c333e50d5c40812f4a812f0ccaa664c13a5353d6aecd9d22c926998b45ec92ac75d09ee6c5f500114a19c0830876fefc79c70daf5dbbe60c0626359d0237406c633cc57a4b8e37686b6b77611843a2b54539843f008ea88b05d00d298e002f61e1c2284402cef245ab3cf0bfdd29700728efb42f585b84ac76bc8b261a6d568b79737313d6d1de624fcacef5f9e7750ee595ab02628ddb3c8b8d880118f6ac68157ba5bca86fa87706d8bbc409277bba05ae197bf59557b4db40cc696459ca35a99d0a106ff7ece9d198aac576eb5d839672c161bb25eab52b6c368b36b6608d52327d5e7ed7e63e780a28b0fd29b0024a311e9bd738315eb8b7c89548d65bf7dec36eac08403b3a9aadb6ae56633cb363271e77207140d11f3139f79eabfebb6da3b8b2adcda1474eac5047c34e6b15778d68e7bc86d67617478fbecafcd685d71eced6d1ddebe2e31d6b518893fbc5ccd70b4bf6790d5c4081cda48003a56be06adbc33302c61a1bcdb54901a889f9a8cda775a45d563bb7697166562b20c66726859290760a4f3a5115d1d51d894e0030c3558e9d0b1071430a138944c5eda4fc6101b0fec11d9797b5e994d0cd4260bebb4d88b5d317df97b53915ef00bfe7fc9b2a075038278985a4e9c41362ef563b92984fab23bb773fb6d5d908e2af300aac70cafb2a975ae1c2dc8c5dbea839c6964e6d3c1cb7d12a6dd2dc7fca925aded5d4dc6843b787b44156abd5a474a6868c115a5bb579d6d48453f28c0c0fdad94f3fb28ece1e3b71527bf80c8ec85861587bcbc69c689baa6fb0d191619bd452b06e8d176b1467ff8debd6b1abcb66a6a7ecb8c4e4cb17ce5a2c91d41443bd1b5be625ca36cb98e1fc994f2dae4e81a9873d7b0fba6988fb2ad3267bd24c91e5dc3ab94d8eb814dd5675357e17b735b90e62dd8802ec9abf517d7e2150d2e05a6a645c901cb68eba2a8bd634d9e882564574efd5561759fb977ffeb5c03369471e795c5c517bf034365b8b00f3a73fbca1f598b29f15f8c627c62c29c05e3e77de5202d6e8d0800d6bd509bbd8f5f4ee95e9de9456e317eddae50b56c79851cb5b305000d8533af6fdad377ee7a6525adb76892f16753cfba2c09bb22b17cedbfe4347edda958bd6d6d12990373965d046c4d8aa77685b97b465e4b5e1852d49c201670bd1e349175b98c0965065e7469a55e79ddc60a5d05a500ab69f57254b9c2e1549d994f6a2292e4ccb40bdd1295ff23a9ee0d917bead698b456dae55aba90ab6ba280a30b5f6ccb32fba78d969fd76ff0debeadee334ad88ac2dd2ba8e8e0ca9c7a81248eb1c470ceb7d5103c694c03636316abb76f768e7afacccf486ecb9175ed4d44bdc163477d921d3bdc9a9496d531292ad6e83dbc232bdb8e000eeed7ff3d55618bd5e8abd5c2572635cb1694e114735acc8a8035a91cab97149f8e990baef56df396f2599df17e9fdf95e1759290ede85353c80b60c1702b7f51488097dacde5a4f6d6766c7b1059c4f595ba34ab9d79852114c4e4e6b9e70ce8dfb38b0a7adbd4dd31470258de7c429bc4640425e52de9170ab0b79597d0fdb76dfe505ffee58e9520856227a21bd1838b18b05d7de9c1fec9e679d0529ceeb1935d018bd63d9012203d8a234478c415706b35b445ff23eab71755541d28336ce6aac89286fda0e443b9abbfd5f5d0ec8dfdd1c65f4f24fb9561d84d1932e1e2d54a6eca2e56787ad5367b9e09697a1355f3d1f6bcbbafaae4412cf9fc6ef2e5a174e77f24619b899994b9b53a87575bb0e91b781db7a0a00cae199acb5f91b6769ef64c729a9384ce5763744bcc349ef9197dd8d98bbad357973157f471857db7abb9116c4ff561e68fdbbf2671fd4a577551135aef26d1c7dbffe75ad00509eca66df736ce4e8b467ad4403cfd08168dd6954caac8cf6df41439dd4a1472b1a2a3c41305d39026f7656bbfd31e7ab45e59cb655a7a32250922d65b232790ceb5e40d26f7cb668bb9beb0d0b2036551f1a9bb5f6461df4eb175905c31f9d23efe82097b4ddc4e8e49c8e8fa8d3d623451b9c58700736b535242d2d4d3be799b4b7d46ad7bd6a6b5848dba56b03ca5b59849b4dac20becfa5c0a2ea6c6deb557d9457f2e7c650f2f02061ee37ee7bf9fbbad22dcfd31d7910de225a089ed0de3b93b319bb35a81de2756c205c1c29a1284e5a1017afd1962a5d1df5f6c9c098edef6ed30a9c451bd631787d5d2db647e75a9ebb3a6ac7f67539c000133a4d365a9a97d67b5e2cedfffcefefdab327f6a8bed8a3d73be732217968663ee3d2e9eb6eb2a6baa4fd1fffef3bf63fffe8599d88366aa7afb03caeca7ef2e7c7652299b17ffafd59fbd1778f5b6f5793b4e9f907aafb725a04f75f8e02d4cde8acd6107fb96882d01b5100f0b159565220e1605844e9e1d16971a57abb727b5cef651cb1ab51a73347adabbd415114edbadec319e7c5b11841c0693984162ea6aed225c3717af39a97cde4652bacefa72e0c39e175585cb3abadc16e0e8cdb81be761bd021beffa1add9daa309750829017ec17efed625cb6672d6a223f73eb830a6f7498dd96bdc52b299456d22cd7caffe97feb8f4823f5f2d059072f6e83c9f00945b407746b38c163186d827ced7d850636d4d755a931ab1b6c6949b2a4ad5c49d42a843a2253de4e33acf5275a28d9c353f2bb6d8d6247f92da9d48eaf082682a658f0c2f96a4487ae1c9835683d82bbf4b025b4ce198ab456103f7ee68ab77f17fe7df1cd611ee09fb77df39a18e824dd18a026eab8d8ccfd9b1fdbbe447fe75cc1e69afb8f2fb9597c1cda653c0eb6bd7444b3d04a05c43922fff80989a57c3cf870b56138b5a2de7708ad2b194482d82c7356ec7019e9c0687091d140b063adb4bbbdee981f71de2aad8f7e6a4ed66ec29c9d56617166d79862923b3be4e446217953675f6b65a91e0ec00c9eb792df7c235f2ad98b1bdbbb53ed6015647eb4943de5c17b6967aed829f59b48c0e562be89a1527e654b64dd51cbb5c047feea4008854c7bd4eb1eab4e0777a0ede3c2805d4e66d46e74e5687721aa36dee26cba148dc2666e3363d38bd367b5eddae7dc7d3faf7eb9fcb420062b63bac4dd5db88c6c125ac97f9086e3797025e65e4a41fe8689032af143912133b79049c7213a90d674b48446c6fd4517e9b18af1f555f7b8fe3b6fef3a65c5dfb100c25f3c2d1c54e3725da2092cfa7c0f422fb2bafd23b148eba53e902507e3eedeedb076dbabe2664dd2d319b5e60f1f67d07fd5a3c823fa64eeab43526f9a57dac9d2ffd5ab255f189d24eea3497968c55e970a8d54386915638423200e52637011afa928c07ae8fa475980f5b659612d0d5bfe58d8fd7f2779b9c953ba25bdf4990b7ac143dc776d7da9561992b6a1369374d59caabf35fbaf723738cd57f285d57e25defb7e459af57dcd751ee95c4b7c10de587e64db55147eff22cb16083bd9b025096536533ef45fdf5d2a0860c2b8e6fb8f277de9badf90b00f32e4325ab1e258386d8751aca97031699913f1612089e1267f5ac1919ee7dc7dd7a73105716c229926a672de4f9462145c46bdea93b4299b14ebfe147ff905c57e9b9bec06eafe3f52f83e72f4f01b0c7447fffe08c4dc96287061f953d6fa7a62968b8b4fcfec129cd15d6e8bc91e42a37fdf249df350680505d1db296c69016a8e7a4f59505d19c34c5d2b8922356b6cce8accd4fcfdfb6a3fb3b94df6abb766bc21932389062a420f16a623a6dcd9ae374c550c8b8e662aff58f39cd2d460fae740ea0a6b9d7096798c0cb6acdef60e43035a31d0e35f6eed9e59966de35c315fc2123edbcdf29df514cd553c029efa0ca26bc50239c9316f6dad0acfdfacdd30e883d6ab018ed77c8586062725e8058b263073aede9e37d02042c656b1d53358db5d5f6eef9111b9a98b323bd6d561b4dca1450c7120a618b32bb4b2f65ed6d1ddf77456004c4d7648c40feae0b74759aeb24978b8b3af25073a2f4f54bf2ffca4b27ecd7ef5cb2979e3962ffacebdcfc92160f00faa85dbb3d66278ff7daf55be3562feb226ca5a76604eaa65afbc1b7ea1c90b7b6d4db33f6ace69ddaebbd43a0ca7348873da02d72025096536513efd1c4eeeb6eb66e819046bfafbbc5aef68f5bb30e50ba3d34a5c3646b64e72a2dad6441cddd6fb9630938c0ec69d7d62adaa82ca92d58d0b6c2057121899d340a8ef1ab960699fbce566f4fdf84e65ae30222a7890da803614101860a00b5b12e2e4ba53a2d5248bbf955160f70b870489c7697ac8c3003acd15eb771cdc74664859496a1437b734a62ad388297b44bff61fa53f48db4d649b1ac8e7ae78f7f0c40b9558d21ac41137be8fef82f4e3aae13d16e0c8f1cd8e5923bbabfcd89b3ac410dabf16b0679abb2b1122fe3c7827a68c0d129ab2244e8b985acb308a26db00aa73619b11fc8f2072b210e7442ae06c8889b8c44b1508283b26d28fe01ae8ed8b4ef3e77443b1766ec506fab13873131242cae3c3c6772122fe326678a481a0fa14399467fb40e93b28bcedbf1e3c703506e559bc06e352460baed494a15900aafee9f4b8544225a735a6abc5b958fd578bd25710b694dd594f243fe3c46e999e6d171c404bcbb39f24c582c877c47fea3da8205bbddfb75f8fdeaca7dbfb9faeafc8550a06de0e834d98ef5fe29b94124c1ab8d2900ceba9ab5c509ebba36a6ffc601bfeab7cae7d442c14d60b7a4b4e03ca52566db39bf5f357db6283d4e70a68dd0c9953b161970644700ca72aa6ce27d4332acf1a31af93677997cc669026bb463424bddf6cfef3627e77d656f49f394533a9b72bd63c3b9ab57b569f9fa0fc1f3e650e06e2a6fc436ff0887cd49e9cbc5428f8df3afdebd376e741fd6fd613cf920575d649200002000494441540ec597efd8acfbcb88afe571f971722d7f4f3eef271dc26c455eee452767ce589ef1d23d3b3d7efbdbdf0e38e506b4d9d457540e67a1e0383889dddd070707edc891231a5346dc5e459b9ae02644c631116ca0cde14428742803474b4c4d4db9334939fa1047cfce77b666e14a03a74c3c73cfc1467440949b838639718c038c2e5fbeec8e46244e00c17bc238c551597c7ce31dc75470842071922627949107befb80227d76dce73de9b1233f71720406a7c051063f1deef14f5876f4e73bf1925fc2723c06f7a4c7e14a4dda0cdc0738effcb25336cac5414cc487f3f38861f9debd7bddbbfbfd437e380120105fef97620fe80f40fee637bf718dc26fb09caf426572f80f472f6c2747c3605c43c3a551d3203957f47bdffb9efdf6b7bf758d1865049d0b2787015ccee10460808786c8517f34720e07e6fc51b6fde44ae37ff5d557ed4f7ffa931d3a74c8357ecafed24b2fb9b363dc466a8a8fa32e388bc63f06f1faf5ebd6d7d7e768c62efae4ef473ffa919d3e7ddac6b51d297920bf887e3ffde94f5dc7c0b117d09ee308c927e0fbb33ffb33f74ca7481800047839e5eddcb9732e9fece8fff6db6fbb6309499f7848eb8a8ee600981c69483ea10b75485c9c9f43d9a001f9015894973cd3a97c11479e02f1f58b50ec01fc52296c91e99f4b0907a2c1d203c391b69b23bf000bae08b868e89c134303a5f1719218603d7bf6ac03a6cfc538e897c380e156342c1a266586c3110fdc0d2e449901240d1cbf801b7743e7c4702627f17144c5071f7ce080841fffb028ee395306ce843f400158e06aa4c17b4042190004e77c72fdf0c30f5d5c7e18383575409a706efc03263a1ffc708ce39933675c1d9167d207e0d08472e01f4e4819780f50013de5277d1ff40f5ab76b0e8d3da04363630feb8cee035270cda1b171b75580f5b4266d5e6733b44a7142c521e65091542abd2cf7543e8d9c86fb75badb1319e5336223da51ad475b51e07c00c135c91f1d089c8553d4e854e00a8009c0511eb814e5a1ac1cea4438800b30fd46cc37c08a64401c84210efcc061000474a103c32f69110ff77ce719c73d60a4e3f8e52f7fe980f8d8638fb93cfaa22671e09f348893f4f821cabef1c61bee3d86df7434d409e005543838207ea933cae497d1174fa7a7a71d47256f0099fc502e5f04260ff8450486436fe4d25ab0c0aa1cf6721ad52a1176426cad8fdbe54fde5407208392a9c9b1e589399958e9848e00941b91f0deef3e0f94f70efdf57fdd0894008a8646c3a291710f573979f2a4132d115ffd8607a7a021f39d064c43a4b1c2ede032888288b10082868cb888d80e58fca30d891fce0510b8facf500760c1091159393ab112dce78132185356422d6f6219000e67872266c215e026701e3809a2e06bafbde63815c0016c8cff000e6328b6bf64dc86280b585fd1896a887200769736ce262e44508e9127fed75f7fdd01146ee3038f6f705fe2275e4443b82b4067ad21a264a5bb604c59e935fc00e503108c23391714a0c1e50015c0397af4a81b73c1e9188f21d6c23551e63016e33d57c003a89ed0f92f88e98c23011f4086832222e207cec81520a239252dd281d372ededed75e1182f328e7b185c20be7ec95aae44f11530214a02167f4c0690b887932276f2ec8b9c80986f840378fef8113ff8e787f3e3e40ae010930987c38f3f6ee39938491f3f7e3a0097fb9dee02f175a7d7e0d7907f1a7e79e3071cbe034400cf770065bd0370bec3bf0f3c3f1e3f8cffecfbdde80ab071e5f9d9c85f25bd0bc4d74aaacda02c154181009415518d41212a890201282ba93683b254040502505644350685a8240a04a0aca4da0cca52111408405911d51814a292281080b2926a33284b455020006545546350884aa24000ca4aaacda02c154181009415518d41212a890201282ba93683b254040502505644350685a8240a04a0aca4da0cca52111408405911d51814a292281080b2926a33284b455020006545546350888aa080d69eb2654a00ca8aa8cda010954001f660605787009495509b41192a8302e294cbda06250065655467508a0aa000806cd43eb801282ba0328322540e0566b5cb7a00cacaa9cfa0243b9c026c28f6de7bef05a0dce1f51864bf8228c0d69cec021f70ca0aaad4a0283b9b02ec7dcba6d6ab1b74aa3cec997bb7c34e777671b732f7eb0fc9decab482b82b99026c46ddafd3c35640092027e6b316097db1f3f42a9948f753b6f9b454d801c9ee8754819fcfa380a644d23acec181521bcb5b22566dd33a873d68609f47b9b5dfe9cc92d190cd2e3fd8b1e36b630b9e1e660a3025d2a353cb1c280550cbe48a9697ec7a5fa0843304529bb6e3d7f918c2621464062ea0c097a400634a770219f1e8b4075bcaeb80d068b5c4574ff7e337335f32f39f3dff01267d3ae496740c799e036e7813b880025f8e021c6cb432a684f36573cb96c9e6dc0948b148c896d5d2384989035a4255d57a16475dca89a3162c958c5b5181aa78f9903a80981720e3a58eec21254350ec4da24095143d9cc3b9024a38e1921ad8efdf396785a2d92307741ea11adbcdc149ab49446d7747a32d2e65edcca5011d6956b4a78fefb1fa548d4501ef432abe01ca74ceac76f550aa4daa9e209a8791028c29396e7e0594458d2767160a767378d65a1b53f6df7e79ca9202e3b2deefdbd36667af8dd9d59b23026095a5d40acf5c1eb61fbffab43537d65a6159287e081d3242aeb06c6db53bffccc487b0fab6659199165901250d2ca6a7833dad02d9b2bdf2c2233635bb6075b57189b0454bc623d2d0861d6744749d5d480bb47a8e62d9fe30d92040a9555725213e700105369302aba0545b43f3fafcc9fd9e1647f770495f8381a8864288ff70559ef92e8e6babd0deccac6dcfb8aaca447568507c88c7d4dbb386767eaed68032aaf9b6881a1ac073ee0e4382920ed6678c7c7f8824374a9fd1e42e63684884226c767adada6bdbf5e413cd512ef81350e08129e04049e71f0957dbe1f684bb3e706c0f41c0c9f1799b9b9976e3e8b08e21fff0ccbbd6bbeb072af94afff610502128e2565260a525d1cfa36d0dccecee4dee8806e21363c376facc597bf6e9272d9759128f0cb8e4bda9167cfd2214f0055117a6249c4a3c334d7fe49c82870f394d9564b2f935f116e589f7792981b8f2cbcabc855f3ab3ea37932d68dca5b127919639fc1718b39639d2f4e22db83c947d5ab95d1b024b24f95df9baf53755eab82e5ebe6abffdddef6d6078c4aac30f91fcbef5e40d5210055638653935e6d319fbd55b17edd9c7f658632a6e17ae8fdad4dc927de3c41e01a968096962e7e63376e996263ad5480b0258b5b4446901371a09dbf0f8ac7de7e9fd96aa89d91f3eb96e077a5a6464201bd164d4696f510e5de91fb73a7d6f6daa7561c1ec2fde3c6faf7ee3a05dbe3d69877b5b5cf819a51352dcd51abfa160cae70b1692a81d8b865d07f0de995b76f2d86e07cc06698a51be6ca51b1f1bb3ce8e5df69ffff3ff64451956a4b5fb18c615810b28b05914d81094c958c4ce5c1db66f3cde63fff4afe7ece30b83d6a6b9cbabb7271c477c45c04909603f7bedb4c656058b6bc574537dc22667d276684fb30d8ccedac8e4bcfded5f3c619f5e1ab1f3d7c66d2997b785c5aced6aae75d32cb7c666acb53e6943e37332ef8b584d326297fb27ec7bcfeeb7b73fba611df2b790ceda7f7bed5307da888c14963239dbd592b24bf2f7d2537bed8a3a85cfae8c388e7e5540fedb7ffbb8d526b776267f7272dae61616ac2a1d92d08a0420400698dcacf618c4230aac115f7d8a84c4fd76b7d5db94407645004004ed6c93918026caeb6be2d63f342370d4899345aca7bdc11aeb12d625ff47f7b6597343d28e1fec70e6773971b5979eeab56a696907c766ad2195b03d5d4d36319b9672847049cb88cbb637d708eccbd601d794df061927c06d4f9d1bb4015debf5dc3f3cedb82a16443989ac037a5e58c8d9f1031dca5b9d2d894bcf2c64fc226cd9f5d0a1fdf6d8f163f6e8b14376fcd123562b7ab8a9a32d4b3188f861a340d5d4e4d8f2c45cd1640a60073a6b6440e075fb93b38b56138fd9e8e49c135117354e6c12f81843624880e9ddac4010d5982a2f79d4899502f3ccfc92c4520c0e0ae288090128efa6d7d332d1cb0adcf502e6acfc34ea3a3d9f76a25f5c9c39232e08403bc509a7e6166d662e630d75325290f8ba285b366c728fec6db701817b574bad4d0ad888b051a599539eb041451446d4dd4a373e3a68a3c3b7ddb40822fb6b6f9cb297bfff63cb1643968aab8f9328dbd39ab4f9a5bcb5d645b7322b9b12f7ed898cf219b19199acf5b4c43725ce20927b53209d2ddab4184a44581b9dcad842a620a9316e973f79d362b1f8c6634aa26c1217c3757734b8eb467f1813ae77a975e2634880c32112fb0e50e3da6329ff9559595ccdf535c60fe7e7c3f7b86f7793bb4dc6bfae068faed503be7ff5f3165c030a6c0605361c536e46c4951ac7b2c6d0d8fa22b2623cb04ea95ca9c50ecaf51552604350b2a62b9d2e899671349aab2221d62c18cde2f057fe8d7bdee1f0e3c7138bc59c3fc222d6b2951e7eb18e8946a3ee9e67beb3a3172e1c0ebbf7c4e1b6722fa5b9debf9f1fc2714fdca411d2c4be9f3f3f4ef2c40f7f38bf1c3c93171ce1fcf7dcaf77fdb706eccae54bce0f64c9e773c63489343eebbd06cf0105be300568451b82726e6ece7ef5ab5fb906fef4d34f3be0d0c0010400a9afaf772ba4878787570096cbe5aca3a3c36eddba25b938a6e98fa4cdcecedaef7ef73b230e1f64a3a3a3b667cf1e6b6969717b5ceeddbbd7ede0050066b411ed98a61c00515f5f9f3536361a697cf4d147f6f8e38fbbb877efde6d717514c43f3f3fef00984aa56c6060c0ddefdfbfdf0607075d1ee958c8f3f5ebd75d3e09479c383a818686061707803c73e68c7bbf6bd72e977ff2d3d5d5e5d2711f4a7f9a9a9aecd0a1c356a5f1245d55cffe9885ab4396b1603b90723a05f75f9c0274f2a31adb6f084a40d7d6d626ede682bdfffefb76f9f26507428072f1e245b7372560fabbbffb3bb7fe8bc6cde2cc1ffff8c7f6faebafbb465d5b5beb7275edda3507849bdaa5abb5b5d56edcb8e1e2fae94f7fea80c0e6b3478f1e7520216e4004a7ca66357d22800048c2bcf4d24bf6d9679fb93000aab3b3d375107412c47be5ca157bf4d1471d883ffcf04377a52301fc8097ebeddbb70d500356c04579de7df75dc725a765c30aa029f3850b175cc771f8f0617beaa9a7d650b7a9a9590aac1a0152ffa4299e5e58366c7a021750603328108b942ddd5a1f614f4f8f13e5e05aec450967a21103d8dede5e07a243870e19fe00e5c4c48403dbc99327dd37b8dee4e4a4bdfcf2cb0ea4703c0001d0e0428016ee47fc80c1078e2f4a92265c0df0747777bb3c1016d194b0c441c740674018f2d1dede6e3535350e4800198e0dc049034e4dfac409d0e18e00fbb1c71e938638e73a01fc1307610038e05fef96359e240f2ca9a92e686706e40d2c23021750e04b52805155538d866d1b4d89c0a5e040344a443eae701d1aab2fc6e2676a6aca3dd3c069ec6cfa835fdfbf3f76e30a77f2b91a7110963000972b6170fe15a0d0f8e90c703c032c1c62311c0d7199b80128e17c3fdc3be0c86f79bec9279c98b401209d09e23257c2503ef2c8d52f8b4bb0eccff4d4b8654bf6ae5502e34cbacab2a17aa9b5f39a12d11854f104532265040b6eefa0c092a644a6bee894c8a54b971c370190fbf6ed730dd46fbc70b4279f7cd23ef9e4133726a491d3a0e12c80020e07481897e27c85d18b2fbe68fff88fff68dff9ce77acbfbfdf89c470da73e7ced98913271c780018200418705e9e8f1c39e280c498efc081030e98efbcf38ebbf68a63d33990478084f8cb781565cfc8c888e3868012ee49be1151c91b5c15919932fdec673fb31ffce0076e1c0a5746dc26cfdffbdef79c5470074579a17c39431e95dbe3913b9f5352824057b5616d6ffacbd2c23fc57ba72446621b8e29011922221ce4cd37dfb4471e79c43efdf4530704380862e3d0d090030f7e00021ceffcf9f34e3c05a8287c00110d9fb11940e10a87fbfdef7fefc68157af5e751c0bf0ffe637bf71f7070f1e34c6848c01c907e2328a1cc683001651962bef4f9d3ae508461e00317904a4a4857287712ce043b9847f382cf9e48ae80ae8198f12e6edb7df767e8e1f3fee004e58eeefea7c7afad7bb7adcfe1f44669b4fe76d5813d970faad73405fbfcd5e18ee860f5b99efcda5089c322ac381d599fbb5f16f084a380f1c85f11580632c0777a16173fc330d192ed7dbdbebee011540606c08b7212c633d804583476cc411061114ce0407036c6838112519f721c60230d2e71d1c13ce0ba7634321ae7416f84511d5a7312e7ec82779219fc441dc7c677c4b5ee9180029dc9afcd0b120dee2978e82fcbff2ca2b2e7ee23e76ec9803e65a52953d554944770dcbdfcd6fe73488b252acdc62ec3f3cad7a2a5659425652eaabbc4e1cfc946e7dcf3c6fe41c05f8b32e8cef9ff5f0a332dbcce494465c0ffe878d22fb22ef1415bb30b265cd4e7198941eee4ac8866e63b7212869e8702444421ca00250887f0013d0c1051157010f9c8d67800b87e9eded752220e101191c8938e1707029800ed8e084c4c10f6e0c98e0887062de918eef07e00118a63e889f6fc44ddef0c38ff471808cce8174011f69c181fd673a06eec90b00c40f6189f3be9cc25694f8aa860dedb1b0acd1be4bba157d44097120ac16d92cad1c4522f51d8e30aa05d145619c6f447b3fbc4432b585e1a90563ebd25d0dea1415bf27fc97c7ed47ec21d68979257f2e3b6509bbfc297ecc2a07a7d2ca9ef24f667782535e3d646d9cd90d41c9140800842b32c602a08c057ffdeb5f3b107eeb5bdf72e061eae02ffff22f0d3114ae88084838fc3357880616311700c0e9e058c4f9cd6f7ed34d610016c6a638381be3c77ff9977f711c8e712d8a1c38e3d9b3671d4703683ffff9cf9dc694f81041e910002440444ce50a474494a52340eb0b878563023ec6b300114ece340a6045d47ef5d5579d767663326df0d6af7fffba81979df28a06ce723c6c79e1604b5ad77a7d7042bb1ad6bad53fac7365850feb5f5b1a6bdc323a21ca33c417ed43021ceb68aff68f59577b83161e44dda205b622ddbfa7451ed5392ae2b80019152766978b8216104c4c2f687550ccad12228e9cf6135e928d74ad3666237e161e4cc906bbad396543a333d6a8554521a557adf02313734aab5e1d49b5a562eabc75ecc64e012536ded09a8e6623b7212869f03468000577f24549443f4454b497fc00195c072e897284f11a22295c0e7f70440085b8c87b4000a7253e381c6188c71f239226f382000740fb5c9634001ea0224e9e512401707a78c6a97ce31e71986ff807a488d5e40bb0e28fce0263063a12fc903657c2deb7937ffed1d8dc95fb1deed4ceb5eb0436cad5765bab80feefffef5d3bb2afcd7669f5cff46cc6ed6cb8a47a7df6d15e1b9d98175dc31a8766b4c361c43a5bebecc9639df6da5ba7eda7df7fca7e7be6aaf50f4e69c1c292fdd5774fd891de7607601a22a2b208eebefdfebd4bd6ae05080eec0d355a7890710b115ab4b080fa6091018ec50a63930b363032a386ac7f6acd435afad7d976dc2471bbf830ee0e85eec57f5c54dbe28f66d2eee9360425f379702534aa10871fcf7ffdd77fed00418c7029ff3ba2278d9f311d7e011d5c100e49183815ca1ffcfbd30d88a380b7afafcf0186f080032e8b8205601107ef011fa22571004ac005c8f80ec8191b92161d0871e097f76889c90fe3c9dede5e97773a16fc035e1feca4e7e797b2f97191de5d1ddddc4e1197ee5a88d20795050b258eac48c5a4e4133077b5d6889e3975cc139aeec9d9beae168d07f39a0eca884b4deb30a8b45bde379b5db27c36637ff18d3edbdfa57a28e6edc295219b5dcc684dac38dcd0943d7b7497db2122ac812536c3ec6251903565675b835dbe396671f636551ee6b4eaa845dc7968547b20692ab8b626aaa580ca87c2b072687862d60e74b7690dee8c5b89c4d24075c54e6dcce27ae2dfeececba13af3bb6495f6ba212869c4388088f8081782eb002e80c43406dc060e085743c4655a8346ec7355381dd31088a58461fc4682fc001ce2249c11873f00e28bb95cfdf7008df4f9ce8f7b808ad84a1e78f6c3132f7904f87061c4701439707eb4b388d8800f0e4f1cbe120a4e4a7e013a614993723df1c413ae4c2e332b7fe8a965902eb129a4f6c092358b90dfbb507925dc36bf21fbfa853426dc2b70fda77ff794b508102ccf630789b480c92e13787bfa58975bbab75262dd00b6bff9eea30252cc9affea6989a8323dd472bb5d5aeb0ae25862471f266b69ad7d2d88ae613b76a0d3f6764bcb2e1fd5ea48691bd0bf586c515d87dc8efc2c80670920a03db2b7c3121277119159aea766a53cab4dd1118b49deada1cbd7b6718e66eecf9d59bae3d882722f3456c67a0091719eaf3d85430126e603e18e00e0f4e9d3aef1a3a081130212e6148983f11c9c9278000326758013450ec7483306254e4458381ce0f9e10f7fe8e2f8e52f7fe9445e00c2f80fee0698e80818ffa15002ec8c6be1da88a198e1c11d011ff7c44d8781c84a78c68f6876c93ff9245f74225cfbfafa5c5c7058f281420940d311d0507c477e726a6cb492bcde9f3e7dce0e3ff60d3daffa81e64535d2edaf1074c220ed5da09148b998b7ebd2c0306e4bd4a66c362b458dd6f7e9844471d2a853cee0371c0fdb923a24ee9dd3cd8dd1254928614bcf0a704996dde904a968dc58ab3b36bbe4f65e02788cfbb2e29488fd70e60880bb8b63b91f6940f356715dd757eb4f9dd6e202c0bcd82d25409406d9ebf781ba4bb45feb6baf6d280b1b7175958df6b821a7a401c32569a0344a1a328d9477701c380893f388b90080f7000b4ec9381040c2ed1011f90651e15c286e0035e08553f1cc7b349ff807587061be033432485c88b4f807d8c44767f0fcf3cf3bb0910620c72f9c8e3cc139012f5c9af0800a80119eb03e37e53d65a343e11d71f8e230e90078c25126dfd1986edebc6613e2aebb25aedfecbf65874eac344fd788183ba5a5e4189dd9fa9d10fc7c3dc8d5e55a9a55c4be44441c4a2fd212511fd8d157ddc54137e6e6a867aeab6e9576abef36ba2bf7e7ddc31d416348dc32432fb1431c63e8787275b55279b669931b9ad941384409b8090d165020e23509ac618183ef05f5523955205c14250eefe07638ee011160f49ffd2b9b4df1cded70a734189c57491404e47028b822e976aac1cf88ab1237f17a3f736266ad7a711a3edc08474f8918c95892b41163e9200029a0076c84e73be582e3e20fe041043fef5cc98f2e6e532cd2a783229cefa62747ed9f5ffb95fd3f3ffbeff65fffcbff629f5c1cb06fbff2a3959d07d04df4b58b53280e7af1edecc81d8a171f22947be5612b32ee93c34f70b3d2f0e3ddacf8be827880cab84490f9c59ccd97ed3c108d6ec02969e7ecfa3d3e312e204ed9258dcb8ee8f9b3cf30733b684725ce2e2da5edf6ad01ebd754c2dcdcac3df3cc334e54447ca9492694d0a21d3b7acc6edcb8a63ad6184263c7258117b04d29ae7de26c93931352e0a4c5cddac531dbdd74cb2baffcb9134b3ffcf0947dffdf7edf7efe3ffec99e7df639c7f50055229e304cecfaf6f659adc09a5ed4592775f58ee35e9336b54b5c322b91765e604a88ebc279ff5516498f6bbc1b13e7ecedf58c0d5e7bed3527011c92389b507e11839312b93cf1bccd354c2483bd7d7b25b609c86595beb49491487fd8feb7fff5bf2aed5acb7dd62fffb432897a02349dc3e5e1f92d6ddb5f419b0992f80a280053a94b6867489d714a0b0a492afde0830f56c557dadd84908b6871edd698bdffdefb6a60598983ddf6c9d9ab528be76cf84f9f58b4a6d966c589c6c6c6b5d955c89a76f5d9c7e7aedaad9bfd969278d8ab863c3c3c64f5addd764d3bcc853550671c39254e1b13f7aa972878f6ca6d679207174a17b528395ce3e2b9707d44401fb19aa60e9b4d6b6e73d73eed84e789cd8383434ef31aa96bb5b7df3f6d0df50dd6d2da62bd352d76e9c688bdf3dea7d6a563fb8ae2ce0d4d8d3634e8d9c12e15227649a78501e8ba962ee12762bd874e3820de966affe21f4e595d7d9deb1828c3e12347adb1a9c13ef8f4a2c653329448ae8aaed4d3a973d7ecbac6a961754070dd7c95f654d17c828649b6a07d7976ca5c196509dcd74b01a43df6beca21a2b88edd337ca99ad6c65963b36a51d1949b007690951f1a1cf7703f77af80614cb0f41a8e07e7c27141f3c620bef4aaa40821ecaad8b722ca817e858183968b8dc4c7339f71c41e92062e2f111911b3dca1bee75d519a14f2e6c44ef532a8f011853dd1163d1f09c9af3818aa7cc6c7ce95e58167d2c14c8b3c508682b81d9ab09c3a25c057eef29ad0e61c4167e44258c55dabfd82727a9795628495237e19cac3b9bce8cbddbe6dfca544a70d42411fbe6e14ce4bcb139f3d7fdc07cea740397dfc7777bbe2b79cc6d073b369895552ad36a2bbf0d1bf4ab791b230092ccc8ea971cd788dd8e56e3559d6d3fb159b5b701f4b7fbcece193df46c36cc2e2fcf0abb1aebe2b0fe7fb230ceffd6f5ccbc3f27dbdf3f3893f3f5ddf0f235b60edc7e7bff709eebf5f9fc6466162e2fc74040eb8a58e645e0b9d7131c089a2a45cded57bca158d45dd14811bb0e2b9e4c843545ac64c26ebfc95e7818e27ac19fdaca623d6bb6a7530aa4b75804aaf9c70f288184443228f7ed94887e6e539afa1f106cafa6f4b1fddc58bd2f7e7d1df75c46b3aceb5e1fd6cf8f1795f953d7abad24b3f35ffdbda34bdb77ef8f26f9b798ff4866ea3dc5ef66ef929af1b08ede5cdfbebd3ef8e0a7099f54bfaf939a7bd2ea499122c3805a2d8e0b2f55fbd2035b3760aa09661a554205c437770a1bc0a808bc069bccf0aa6ea767ee44f7ef04f03200cae148b1ab077ac00f2b39be7524323ce82c44cb82b49120aff5e43f79ee15e5e5e383621bf266d2f76c5a37f7e7a288ee0e02891fc70cc9361be154665aeefb852f6dd3d65a81667a57ce41fbff863432c3f5ee7b1f48732b4487b8ca513b48023fb8e32b5b6b66bac7dd31b03fb1f7425eea6e6161bb879c36a34ef8b5f1c7f23616dd7a913b1870686d44b2657bfc94f42e35c14318cbfe31a13fb65a0acf51a2a2ca697f45bd4b08032bb285df89a5ad918cfcc9aec9e6d48e788cea9c2bb52d5d6a41de4a1199c3ea472630d23c6eef2e7e7872ba5228b52f7e99be8a38e06659a939044236795233fe4034a298bcef18ca333a14d6036e7be9339e747520b370a90559d46694fbe931736f6a63ef85e8ad2ffba69573ad4d6d6361ba40e5dbb90c590da494434649662a5dd2b45242b7429d33d50000009e74944415417e8179235b5da6522abf6cc426499248a706ca046898aca37e128a6732e1ebaf452b1ddddeabdefadf4dad1b1a6b6466d2164698640551a0f313ea43d12298a92a6c606652822e587f67955855cd7580b327575754aab898da48e5dbfd1aff1a1a64c04aca4224c48d339372bf3367d73a093769682ce4ccfa93235d7a831e52e6c59b5972c84b9a97338da35268ca921c6225135aeb48d2b1f9e76b728bfed0e6034800b172f6b6cab2912850d49f1c2d10979e59378aaaba9586fe3abb1d131ebebeb71efa0d1b9f3173465d36cddbb777b15209f19296a003c1ad9cb97aec8d0fe805dbd7e5d79880970cdf251e5c460076e3d39aea874281371022268d3dad2a4b2ea45994369145159da542e1f787c862661c51f93e2897130a0f01d159fd5f449ad2abdb95546f4a56f0c09e2f23f3d3d63294d4d35d4791a6ec2f12d89a26b70d85a347e8e8b2e253cb868c9d59cec4a3fcd8d5a5127a95dbdb5c76e4d9db1bf6a3f60f9a579d9a8de96d26e9f412fa67ba0071d126525df51756c7352a2cdce2ed8c17d7dee30a30307f66b6b980f357db5dbda31085147363a3a628d0d9e763a2649607c7cc2a55faf313a5a44e692996a1ad63c30da703ab2eeeedd0ed457ce9c7579486aac1fd1b0888ef1a2eab9b19129afb80c1652aa239d24ee62dcbc3fd00ea085a5816f52d9c7a7e76d778f9603aa1d2ececfca162153dac738af7cb022a9e81856521aff3787b44eb82a613fdc95b68644b59dbf70497523d0de1e726d93baa3a34f26929a3de8d089e7aab35209603b4b9a9ea3938ba9335865272a9b0a5925dacccccc69ca517a187aae85f4829d3de7695b1bd403d3b0403ff38710736e6e5e1ad5057beffd0fecd0e1832e92115508738eccd33df9f863d6d2ac79bd4b971df5a6a664ccae1e1ad02612807059ca9f113bf5e1472abc943a023d15d8a8060520e3096fe917dacf05a5333438e2e60bbbbabc4dac66e7e7ecd4c79f486bdbe77a2f3a8b0f4e7d244b8f94384f52e79a2c6893e77a1b1c1eb48f3f3dad23dfb5044cbfb985795b12373975ea63d71868b8059981cdcf2dd8bebe3efbe39fde759571fd7abf7a4bcf16978e6741dfe924002e6351aea3e363ae33faf6b7bfed68e27ac782d71bfa4dc607866bdc2ab3ef5c7fc747fd5cc595591514aa3d7f3e07639c8c834bf9f7842b8f936f3e78a1adf7cd4fcd1be7660a397beddd71eb7bfca8cd17c27673f9137b7ca4c5f6346823b11b379d667d7068509d5d97f5dfbce51a504ada64373da5ba852bb68abbefefebd57114da8d5ef53220fad2b93636d6abd55449bbde6fdd3d5d76439d7697a6b000e2927665602ebb518a38e6881f79e498e2177d259e334536a88e046df7e8d8a87d7afa8c3dfac8513bac1548636a0f744ca7557f5971ae43870fb8b0453185cd748e76a58a9a12139956c7d3db97d49cf44501a95d9b9187edeae58bf691dadb4ffee6af85164db3a94a381d60590c28afe1c23c76d9c9661b529b9e545ba7a3bf7cf9aa0322060d57a6bd85f2c78e1df138bfaa38a461c81b6fbce52ce4bef9c237ac40b9d47b823fe686a746c615cf92637c61440e7abb7dbdbd02d86d71962601685422634e449218244d2bbd794b53b3d87bc8f9cde564c99fdae7c44ddec35d4179ad7a08da62a1d6e374d5e26a93322a60ca03ced62a2e410382fbd21850a2d437d4396e5023ae00a7094dc8eaa327226ed3aade92e30c30ef0a5ba8372cb0c9104122110da65153219d8a2321407f76f69c34bf35d613e976204714989c9a94b173ab0e1dca585381359e61e5bdc1d9d1625830a24671505c922995eeee2ed769b449ac6915b71cb61181dae320f46233a2418fb4d088c1183530cf29f6e7885ade609c08e3bf588b57bda51997386bd9376e1182fc4faa25cf2dabba74ef8953ebc2f18d20fcf19d1faef41c5103da3ddf6d6f8fffc13aab775b4dff73d6d025e3efe5b48cc863b26e62cd6a545c404be89468ad4468e84b4f4fc382564c2909fe123323e29e513bf1a86c8435cc61383124701d501cc97852a1ab5de796d0ea8ea264e684ac8010c9919c888385e68da2e7b973e765e79ab062c213f7c87f93da0fc385cece0e714aad0cd215230f4ae60635ebcae517f781afa29d177995a6efe2a241c24deb5dbd7acd32624e470eedb53de29c4810d56a334571caa244d5a41431afeed579389aa71e3df78156aebceaa4a606311e184ccf9edd1a46c49ce475e9d215d7e9d1a9024696b3c1a19f7efaa4932cc100f50c203963676474dcc5e54477ca3d3e36b27cf1fc676ac0020c3db97ed3ea0968c470ba09cd57d2530050c4511c222495373931e5c493b8b8219d0f2208121dc40690d88862f9428fcb188286322f6e0888112b012ad60d0bb2c081533823043d23e61404beb01a02860054505240c28f27beb222446354895da4353c32ea0c016212bbb20231222f73a07c4b690c975323c3b6156b1dca47fcf4c67436e41162d0d010dbf80ef06988383a0568417e20222225630ca673d649afa24f4ce3cd6127da128fef1cb1a5a51d17b76d696c76b4f3bf854252f2e47434838e70689028045d71048f0a3cb36ad8bcab5587e5e21431f012570738a68e252e00c464d05d961ca16d429de1c242c2feeee6bb5668abb63f2f9eb4670f7a20231ee82802898ea2a59e1986289873d0d98bcf7b01376891a105f4242c577f9c0f5dfcf81069d124ba67c587d2cbd591e8e6c22a5e3a54da06e9f2ce4308461b5268c93fe3aaf27c7839dabcbf948b39e95b036240aac310a2ba8ed1b879ab5ff4af95955687935018a2d12b66a5819f97a4d8a8b6e3676c7cf0a6a59ada5d58fc319c629b51c698d435ed0fe0f96576b957ba2e4e3df875cc711f03920aa15754e04d4b3f707b70dcaa3e7cffdde5e969c9b16aa0bef3c74a88488c87e8e19d1176a9d27c7f24e21258f7deffced5f9513c8ac295a93c6ef752efcb15072eec4a7c6a001087a002e11a578a8f771be5637d3a77f8290befe25dffbc26b1d5070848c3a2b1ad779e28e91911f08d3647b4fc250ca2e1ca94898a43e3a7ec181ca034a2acc4ef1a2bc55560c41cb4a93e1d49c3b3825227a8e919b4b3eb1d0d0fa5594c5add8256e5abbf91f1043befb9445dbaa4e3f7ccebc3af7ff6d2f6f5dbebbfdee3f93e69eac5502af09ae878f7608ecedea7fefa1828fbb23a8590241f1cf40e4b3741474127a317de7bfd45aa73537b653db06338b46928e991b454cf2e98fbc37bbe1395dfbe57bf72a77a57dc489da44f7b1d1173d9bb5f7b0a6b0f1e2fb817cbda70c1d38614703de05de8c590704ceb0fa3c24aad96413126c739a0a99250dcd001c2c9995745fcc66a88b12bbd2b0d03ce0c10d0c6fa8045e930313eead6111ed178cbd714d2c036727e1e4bedcb351edf1f61b0b2428caf4ca71985010dc1a494a98aa0ac5cb541e6e8c2fa64d8ea74f4a2af2d063cabce03a4ffec3f95fb28ff3639af83ab24b2d7ca483fa64a87b62ccece2b1da65d1a129200558f1b39af4d9082173b1d370b40fe7fd7858fa3f01ca36b0000000049454e44ae426082}}
\f2 \expnd0\expndtw0\kerning0
\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural
\cf0 \expnd0\expndtw0\kerning0
When a stored process is run, it is actually run on behalf of a user by a special user id. If you have configured SAS in the recommended way then Stored Processes will usually be run under the SASSRV user-id. So if a user called PHIL tried to run a stored process, it would check whether that user was allowed to run that stored process and if so it would be run on the requested server (probably a stored process server) using the SASSRV user-id. This is an important fact to be aware of when designing applications particularly for UNIX systems which are very fussy about permissions.\
\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural

\b \cf0 \expnd0\expndtw0\kerning0
{\*\bkmkstart Creating_Stored_Processes}Creating Stored Processes{\*\bkmkend Creating_Stored_Processes}\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural

\b0 \cf0 \expnd0\expndtw0\kerning0
When creating a stored process it is often easiest to use Enterprise Guide, since you can use wizards to create code or write your own, test it out and then save the code as a stored process. A wizard will guide you through the process and allow you to specify everything in an easy way.\
Another way is to create the metadata for the stored process using the SAS Management Console. This allows everything to be specified, including where the source code is located. You then need to write the source code for the stored process separately and ensure that it is in place when you try to use the stored process. If doing this, then there are a few things you will need to know about the structure of stored processes.\
The SAS code for a stored process can be as simple as a normal everyday SAS program. For instance I could have a data step and a proc print in a file called test.sas, and that would be all that was required. In my stored process metadata I would need to point to that code so that when the stored process was run it would load that SAS code in and execute it. However by making use of 3 other lines of code you can get a lot more power out of a stored process.\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural

\i\b \cf2 \expnd0\expndtw0\kerning0
*ProcessBody;\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural

\i0\b0 \cf0 \expnd0\expndtw0\kerning0
This comment should be placed at the start of a stored process since it will initiate input parameter processing, if there are any input parameters \'96 otherwise it does nothing. Whatever input parameters are passed to the stored process, including any defaults, are inserted in the code at this point when it runs. So if you pass a value in for a parameter called MONTH as FEB, then it is just like having the statement \'93%let MONTH=FEB\'94 in your code at that point. So you will get a global macro variable defined for every stored process parameter. If you don\'92t include \'93*ProcessBody;\'94 then values for parameters will be available.\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural

\i\b \cf2 \expnd0\expndtw0\kerning0
%stpbegin;\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural

\i0\b0 \cf0 \expnd0\expndtw0\kerning0
This macro initializes the Output Delivery System for use from a stored process. By setting various macro variables you can affect what this macro does. For example, by setting the _ODSDEST macro to RTF will cause the macro to produce RTF output.\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural

\i\b \cf2 \expnd0\expndtw0\kerning0
%stpend;\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural

\i0\b0 \cf0 \expnd0\expndtw0\kerning0
This macro finalizes the ODS output. For example if we had been writing HTML, it would write the final HTML tags such as </body> and </html>.\
Of these 3 things, %stpbegin is the most complex to understand since it can make use of about 40 reserved macro variables to control what it does. Some of the more useful of these and ways to use them will be explained later.\
\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural

\i\b \cf0 \expnd0\expndtw0\kerning0
{\*\bkmkstart Macro_variables_used_with_stpbegin}Macro variables used with %stpbegin{\*\bkmkend Macro_variables_used_with_stpbegin}\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural

\i0\b0 \cf0 \expnd0\expndtw0\kerning0
Some of the following macro variables will be populated by the web application and you can look at the value to use it in your stored process (e.g. _metauser). Other values can be set by you prior to %stpbegin being called, and then the stpbegin macro will make use of the values you set.\
\pard\tx720\li720\sl480\slmult1\ql\qnatural\pardirnatural
\ls7\ilvl0
\b \cf0 \kerning1\expnd0\expndtw0 {\listtext	1)	}\expnd0\expndtw0\kerning0
_ACTION
\b0 \expnd0\expndtw0\kerning0
 \'96 an action for Web application to take (form, execute, properties, background, strip, index, data)\
\pard\tx720\li720\sl480\slmult1\ql\qnatural\pardirnatural
\ls7\ilvl1
\i \cf0 \kerning1\expnd0\expndtw0 {\listtext	
\f4\i0 \uc0\u8259 
\f2\i 	}\expnd0\expndtw0\kerning0
FORM
\i0 \expnd0\expndtw0\kerning0
 - displays custom input form if one exists.\
\ls7\ilvl1
\i \kerning1\expnd0\expndtw0 {\listtext	
\f4\i0 \uc0\u8259 
\f2\i 	}\expnd0\expndtw0\kerning0
EXECUTE
\i0 \expnd0\expndtw0\kerning0
 - executes the stored process.\
\ls7\ilvl1
\i \kerning1\expnd0\expndtw0 {\listtext	
\f4\i0 \uc0\u8259 
\f2\i 	}\expnd0\expndtw0\kerning0
PROPERTIES
\i0 \expnd0\expndtw0\kerning0
 - displays the property page, which enables you to set input parameters and execution options and 	to execute the stored process. This is really useful and flexible when you want to run an unfamiliar stored process\
\ls7\ilvl1
\i \kerning1\expnd0\expndtw0 {\listtext	
\f4\i0 \uc0\u8259 
\f2\i 	}\expnd0\expndtw0\kerning0
BACKGROUND
\i0 \expnd0\expndtw0\kerning0
 - executes the stored process in the background. Useful if your stored process runs for a long time, especially since browsers will usually timeout after about 3-5 minutes and if your stored process runs longer then you can lose track of it.\
\ls7\ilvl1
\i \kerning1\expnd0\expndtw0 {\listtext	
\f4\i0 \uc0\u8259 
\f2\i 	}\expnd0\expndtw0\kerning0
STRIP
\i0 \expnd0\expndtw0\kerning0
 - removes null parameters, used in combination with EXECUTE and BACKGROUND.\
\ls7\ilvl1
\i \kerning1\expnd0\expndtw0 {\listtext	
\f4\i0 \uc0\u8259 
\f2\i 	}\expnd0\expndtw0\kerning0
INDEX
\i0 \expnd0\expndtw0\kerning0
 - displays a tree of all stored processes. This is very useful if you just want to browse all the stored 	processes that are defined and then select which one you want to run.\
\ls7\ilvl1
\i \kerning1\expnd0\expndtw0 {\listtext	
\f4\i0 \uc0\u8259 
\f2\i 	}\expnd0\expndtw0\kerning0
DATA
\i0 \expnd0\expndtw0\kerning0
 - displays a summary of general stored process data.\
\ls7\ilvl1\kerning1\expnd0\expndtw0 {\listtext	
\f4 \uc0\u8259 
\f2 	}\expnd0\expndtw0\kerning0
You can combine parameters as follows, e.g. \
\pard\tx720\li720\sl480\slmult1\ql\qnatural\pardirnatural
\ls7\ilvl2
\i \cf0 \kerning1\expnd0\expndtw0 {\listtext	
\f4\i0 \uc0\u8259 
\f2\i 	}\expnd0\expndtw0\kerning0
_ACTION=FORM,PROPERTIES
\i0 \expnd0\expndtw0\kerning0
 \'85 displays a custom input form if one exists, otherwise displays the property page.\
\ls7\ilvl2
\i \kerning1\expnd0\expndtw0 {\listtext	
\f4\i0 \uc0\u8259 
\f2\i 	}\expnd0\expndtw0\kerning0
_ACTION=FORM,EXECUTE
\i0 \expnd0\expndtw0\kerning0
 \'85 displays a custom input form if one exists, otherwise executes the stored process.\
\pard\tx720\li720\sl480\slmult1\ql\qnatural\pardirnatural
\ls7\ilvl0
\b \cf0 \kerning1\expnd0\expndtw0 {\listtext	2)	}\expnd0\expndtw0\kerning0
_DEBUG
\b0 \expnd0\expndtw0\kerning0
 \'96 debugging flags. These have a range of possible values:\
\pard\tx720\li720\sl480\slmult1\ql\qnatural\pardirnatural
\ls7\ilvl1
\i \cf0 \kerning1\expnd0\expndtw0 {\listtext	
\f4\i0 \uc0\u8259 
\f2\i 	}\expnd0\expndtw0\kerning0
Log
\i0 \expnd0\expndtw0\kerning0
 \'96 shows the SAS log after the stored process runs\
\ls7\ilvl1
\i \kerning1\expnd0\expndtw0 {\listtext	
\f4\i0 \uc0\u8259 
\f2\i 	}\expnd0\expndtw0\kerning0
Time
\i0 \expnd0\expndtw0\kerning0
 \'96 shows the real time taken by the stored process at the end\
\ls7\ilvl1\kerning1\expnd0\expndtw0 {\listtext	
\f4 \uc0\u8259 
\f2 	}\expnd0\expndtw0\kerning0
You can combine several _debug flags with commas like this: \'93_debug=log,time\'94. You can also use SAS/Intrnet style numbers to specify these flags. My favorite is using \'93_debug=2179\'94. This is a decimal converted from a binary, in which I set bits for various _debug options I want.\
\pard\tx720\li720\sl480\slmult1\ql\qnatural\pardirnatural
\ls7\ilvl0\cf0 \kerning1\expnd0\expndtw0 {\listtext	3)	}\expnd0\expndtw0\kerning0
_
\b \expnd0\expndtw0\kerning0
GOPT
\b0 \expnd0\expndtw0\kerning0
_
\b \expnd0\expndtw0\kerning0
DEVICE
\b0 \expnd0\expndtw0\kerning0
 \'96 set the goption device parameter. I usually use sasemf for this, although other popular choices are java, activex and png. One nice thing about using sasemf on UNIX is that true type fonts are more easily used from it.\
\ls7\ilvl0\kerning1\expnd0\expndtw0 {\listtext	4)	}\expnd0\expndtw0\kerning0
_
\b \expnd0\expndtw0\kerning0
GOPT
\b0 \expnd0\expndtw0\kerning0
_
\b \expnd0\expndtw0\kerning0
HSIZE
\b0 \expnd0\expndtw0\kerning0
 \'96 set the goption hsize parameter. Useful if you want to specify the horizontal graph size precisely.\
\ls7\ilvl0\kerning1\expnd0\expndtw0 {\listtext	5)	}\expnd0\expndtw0\kerning0
_
\b \expnd0\expndtw0\kerning0
GOPT
\b0 \expnd0\expndtw0\kerning0
_
\b \expnd0\expndtw0\kerning0
VSIZE
\b0 \expnd0\expndtw0\kerning0
 \'96 set the goption vsize parameter. Useful for specifying the vertical graph size.\
\ls7\ilvl0\kerning1\expnd0\expndtw0 {\listtext	6)	}\expnd0\expndtw0\kerning0
_
\b \expnd0\expndtw0\kerning0
GOPT
\b0 \expnd0\expndtw0\kerning0
_
\b \expnd0\expndtw0\kerning0
XPIXELS
\b0 \expnd0\expndtw0\kerning0
 \'96 set the goption xpixels parameter. I usually query my browser to work out the width, allow for any other things taking up space on the screen, and then set the width appropriately. I need to adjust this when I change destinations though, since producing a graph for an RTF document is best done by customizing its size for the page.\
\ls7\ilvl0\kerning1\expnd0\expndtw0 {\listtext	7)	}\expnd0\expndtw0\kerning0
_
\b \expnd0\expndtw0\kerning0
GOPT
\b0 \expnd0\expndtw0\kerning0
_
\b \expnd0\expndtw0\kerning0
YPIXELS
\b0 \expnd0\expndtw0\kerning0
 \'96 set the goption ypixels parameter. In addition to the comments for _GOPT_XPIXELS, I use this parameter when I have lots of items I want to put on my y-axis. I can make the graph very long and then display them all clearly as the user scrolls the HTML page down.\
\ls7\ilvl0\kerning1\expnd0\expndtw0 {\listtext	8)	}\expnd0\expndtw0\kerning0
_
\b \expnd0\expndtw0\kerning0
GOPTIONS
\b0 \expnd0\expndtw0\kerning0
 \'96 set some SAS/Graph options.\
\ls7\ilvl0\kerning1\expnd0\expndtw0 {\listtext	9)	}\expnd0\expndtw0\kerning0
_
\b \expnd0\expndtw0\kerning0
METAPERSON 
\b0 \expnd0\expndtw0\kerning0
\'96 shows the real name of the person associated with the userid in the metadata. Will be 
\i \expnd0\expndtw0\kerning0
unknown
\i0 \expnd0\expndtw0\kerning0
 if there is no association.\
\ls7\ilvl0\kerning1\expnd0\expndtw0 {\listtext	10)	}\expnd0\expndtw0\kerning0
_
\b \expnd0\expndtw0\kerning0
METAUSER 
\b0 \expnd0\expndtw0\kerning0
\'96 shows userid that was used to connect to metadata server.\
\ls7\ilvl0\kerning1\expnd0\expndtw0 {\listtext	11)	}\expnd0\expndtw0\kerning0
_
\b \expnd0\expndtw0\kerning0
ODSDEST 
\b0 \expnd0\expndtw0\kerning0
\'96 Specifies the ODS destination (default is HTML). Can also be one of (CSV, CSVALL, TAGSETS.CSVBYLINE, HTML, LATEX, NONE (which produces no ODS output), PDF, PS, RTF, SASREPORT, WML, XML or any other tagset destination.\
\ls7\ilvl0\kerning1\expnd0\expndtw0 {\listtext	12)	}\expnd0\expndtw0\kerning0
_
\b \expnd0\expndtw0\kerning0
ODSOPTIONS 
\b0 \expnd0\expndtw0\kerning0
\'96 specifies options that are added to the end of the ODS statement. One key use of this is if you want titles and/or footnotes to be included in graphs, since NOGTITLE and NOGFOOTNOTE are default options. You can override them by specifying GTITLE and/or GFOOTNOTE in _ODSOPTIONS.\
\ls7\ilvl0\kerning1\expnd0\expndtw0 {\listtext	13)	}\expnd0\expndtw0\kerning0
_
\b \expnd0\expndtw0\kerning0
ODSSTYLE
\b0 \expnd0\expndtw0\kerning0
 \'96 sets ODS STYLE= option.\
\ls7\ilvl0\kerning1\expnd0\expndtw0 {\listtext	14)	}\expnd0\expndtw0\kerning0
_
\b \expnd0\expndtw0\kerning0
ODSSTYLESHEET
\b0 \expnd0\expndtw0\kerning0
 - Sets the ODS STYLEHEET= option.\
\ls7\ilvl0\kerning1\expnd0\expndtw0 {\listtext	15)	}\expnd0\expndtw0\kerning0
_
\b \expnd0\expndtw0\kerning0
PROGRAM
\b0 \expnd0\expndtw0\kerning0
 - Name of the stored process.
\b \expnd0\expndtw0\kerning0
 
\b0 \expnd0\expndtw0\kerning0
This is really useful if you want to build up a link from the current stored process to itself, since this gives you the name of the stored process.\
\ls7\ilvl0\kerning1\expnd0\expndtw0 {\listtext	16)	}\expnd0\expndtw0\kerning0
_
\b \expnd0\expndtw0\kerning0
RESULT
\b0 \expnd0\expndtw0\kerning0
 \'96 Specifies what kind of final result is produced by the stored process. It can be one of the following:\
\pard\tx720\li720\sl480\slmult1\ql\qnatural\pardirnatural
\ls7\ilvl1
\i \cf0 \kerning1\expnd0\expndtw0 {\listtext	
\f4\i0 \uc0\u8259 
\f2\i 	}\expnd0\expndtw0\kerning0
STATUS
\i0 \expnd0\expndtw0\kerning0
 \'96 produces no output to client.\
\ls7\ilvl1
\i \kerning1\expnd0\expndtw0 {\listtext	
\f4\i0 \uc0\u8259 
\f2\i 	}\expnd0\expndtw0\kerning0
STREAM
\i0 \expnd0\expndtw0\kerning0
 - output is streamed to client through the _WEBOUT fileref.\
\ls7\ilvl1
\i \kerning1\expnd0\expndtw0 {\listtext	
\f4\i0 \uc0\u8259 
\f2\i 	}\expnd0\expndtw0\kerning0
STREAMFRAGMENT 
\i0 \expnd0\expndtw0\kerning0
\'96 just like 
\i \expnd0\expndtw0\kerning0
stream
\i0 \expnd0\expndtw0\kerning0
 but kind of a cut down version. This is not documented but I find it really useful for producing HTML when I want to have more control over my HTML.\
\ls7\ilvl1
\i \kerning1\expnd0\expndtw0 {\listtext	
\f4\i0 \uc0\u8259 
\f2\i 	}\expnd0\expndtw0\kerning0
PACKAGE_TO_ARCHIVE
\i0 \expnd0\expndtw0\kerning0
 - package is published to an archive file.\
\ls7\ilvl1
\i \kerning1\expnd0\expndtw0 {\listtext	
\f4\i0 \uc0\u8259 
\f2\i 	}\expnd0\expndtw0\kerning0
PACKAGE_TO_REQUESTER
\i0 \expnd0\expndtw0\kerning0
 - package is returned to the client. The package can also be published to an archive file in this case.\
\ls7\ilvl1
\i \kerning1\expnd0\expndtw0 {\listtext	
\f4\i0 \uc0\u8259 
\f2\i 	}\expnd0\expndtw0\kerning0
PACKAGE_TO_WEBDAV
\i0 \expnd0\expndtw0\kerning0
 - package is published to a WebDAV server.\
\ls7\ilvl1
\i \kerning1\expnd0\expndtw0 {\listtext	
\f4\i0 \uc0\u8259 
\f2\i 	}\expnd0\expndtw0\kerning0
PACKAGE_TO_EMAIL
\i0 \expnd0\expndtw0\kerning0
 - package published to one or more e-mail addresses.\
\ls7\ilvl1
\i \kerning1\expnd0\expndtw0 {\listtext	
\f4\i0 \uc0\u8259 
\f2\i 	}\expnd0\expndtw0\kerning0
PACKAGE_TO_QUEUE
\i0 \expnd0\expndtw0\kerning0
 - package published to a message queue.\
\ls7\ilvl1
\i \kerning1\expnd0\expndtw0 {\listtext	
\f4\i0 \uc0\u8259 
\f2\i 	}\expnd0\expndtw0\kerning0
PACKAGE_TO_SUBSCRIBERS
\i0 \expnd0\expndtw0\kerning0
 - package published to a subscriber channel.\
\pard\tx720\li720\sl480\slmult1\ql\qnatural\pardirnatural
\ls7\ilvl0\cf0 \kerning1\expnd0\expndtw0 {\listtext	17)	}\expnd0\expndtw0\kerning0
_
\b \expnd0\expndtw0\kerning0
SRVNAME \'96 
\b0 \expnd0\expndtw0\kerning0
the host name of the server. This is very useful when you want to write stored processes that can build URLs for links\
\ls7\ilvl0\kerning1\expnd0\expndtw0 {\listtext	18)	}\expnd0\expndtw0\kerning0
_
\b \expnd0\expndtw0\kerning0
SRVPORT
\b0 \expnd0\expndtw0\kerning0
 \'96 the port number on which this request was received. Also useful in building up a URL for links.\
\ls7\ilvl0\kerning1\expnd0\expndtw0 {\listtext	19)	}\expnd0\expndtw0\kerning0
_
\b \expnd0\expndtw0\kerning0
STPERROR
\b0 \expnd0\expndtw0\kerning0
 - Global error variable, 0 if everything worked properly, otherwise non-zero.\
\ls7\ilvl0\kerning1\expnd0\expndtw0 {\listtext	20)	}\expnd0\expndtw0\kerning0
_
\b \expnd0\expndtw0\kerning0
URL
\b0 \expnd0\expndtw0\kerning0
 - Specifies the URL of the Web server middle tier used to access the stored process. Also useful in building up a URL to use with links.\
\ls7\ilvl0\kerning1\expnd0\expndtw0 {\listtext	21)	}\expnd0\expndtw0\kerning0
_
\b \expnd0\expndtw0\kerning0
USERNAME
\b0 \expnd0\expndtw0\kerning0
 - the user name obtained from Web client authentication.\
\pard\tx720\li720\sl480\slmult1\ql\qnatural\pardirnatural
\ls7\ilvl0\cf0 \
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural

\b \cf0 \expnd0\expndtw0\kerning0
{\*\bkmkstart Extending_the_usefulness_of_metadatasecurity}Extending the usefulness of metadata/security{\*\bkmkend Extending_the_usefulness_of_metadatasecurity}\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural

\b0 \cf0 \expnd0\expndtw0\kerning0
In SAS 9 we have metadata available \'96 metadata is data about data. SAS Metadata tells us about the SAS 9 Business Intelligence environment such as Stored Processes, Servers, Users, etc. For example when a user runs a stored process through the SAS Stored Process Web Application they specify a userid and password. The userid is looked up in the metadata and a check done that they are allowed to run that stored process. If they can, then metadata is used to retrieve the SAS code to run and to determine what server to run it on. If the server hasn\'92t started running, then metadata is used to start the server. When results are produced metadata determines what is done with them. This is only part of what goes on automatically behind the scenes when running a stored process in a web browser.\
There is much more that you can do with your metadata though. SAS provides some tools for interacting with metadata. There are several functions that can be used from the data step. There is a procedure called Proc Metadata in which you specify XML to tell it what you want to do with the metadata. There is also Management Console that allows you to interactively use the Metadata.\
A colleague of mine developed an incredibly useful macro which we use to determine what groups a user is a member of in the SAS metadata. We can feed it a userid and get back a list of the groups. That means that in management console we can define groups for particular functionality (e.g. the 123 group get to see data from Study 123). We then assign users as members of groups. Then in a stored process we can look up the user to see what functionality we should make available to them. So when a stored process runs that produces a list of studies from which they can choose data, we will only show those studies which they are supposed to see the data.\
You can use the following macro as follows: \'93%meta_person(person=Philip Mason)\'94. You then get a collection of other macros that will list things defined in the metadata for that person. So you can work out what things they should be able to see and then only show those things.\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural
\cf3 \expnd0\expndtw0\kerning0
%macro meta_person(person=);\
\
   %** input parameters ******************************************************;\
   %** person   : name of person to get memberships for as stored in        **;\
   %**            metadata                                                  **;\
   %**************************************************************************; \
\
   %* create empty global macro variables;\
   %global _meta_person_uri _meta_person_name _meta_group_names _meta_group_uris _meta_group_num;\
   %let _meta_person_uri=;\
   %let _meta_person_name=;\
   %let _meta_group_num=;\
   %let _meta_group_names=;\
   %let _meta_group_uris=;\
\
   %if %index(%superq(_srvname),mysassystem)>0 %then\
     %do ;\
       %let server=%scan(&_srvname,1,.).%scan(&_srvname,2,.) ;\
       %let pwd=\{sas001\}eDJ0OTJ2MGFz;\
     %end ;\
\
   %* set metadata server options;\
   options metaserver="&server"\
           metaport=8561\
           metaprotocol=bridge\
           metauser="sas"\
           metapass="&pwd" \
           metarepository="Foundation";\
\
   %* get URI for person in metadata;\
   data _null_;\
      length id type $256;\
      type='Person';\
      id='';\
      rc=metadata_resolve("omsobj:Person?@Name='&person.'", type, id);\
      %* create macro variables if person is found;\
      if rc gt 0 then do;\
         call symput('_meta_person_uri',strip(id));\
         call symput('_meta_person_name',strip("&person"));\
      end;\
   run;\
\
   %* if URI for person is found get group memberships;\
   %if &_meta_person_uri ne %then %do;\
\
      %* set temporary filename;\
      filename out temp ;\
      \
      %* get group memberships for person;\
      proc metadata server="&server"\
                    port=8561\
                    userid="sas"\
                    password="&pwd"\
                    in="<GetMetadata><Metadata><Person id='&_meta_person_uri'/></Metadata><NS>SAS</NS><Flags>1</Flags><Options/></GetMetadata>"\
                    out=out ;\
      run;\
\
      %* get groups person is member of from output of proc metadata;\
      data work._groups (keep=id name);\
         infile out lrecl=32767;\
         input;\
         %* read in proc metadata output;\
         line=_infile_;\
         %* get number of groups person is member of;\
         numgroups=count(line,'<IdentityGroup ','i');\
         call symput('_meta_group_num',strip(put(numgroups,8.)));\
         do i=1 to numgroups;\
            %* go to beginning of identity group;\
            line=substr(line,index(line,'<IdentityGroup '));\
            %* the URI of the group is the second word;\
            id=scan(line,2,'"');\
            %* the name of the group is the fourth word;\
            name=scan(line,4,'"');\
            output;\
            %* go to end of identity group;\
            line=substr(line,index(line,'/>')+2);\
         end;\
      run;\
\
      %* create macro variables with URIs and names of groups;\
      proc sql noprint;\
         select name , id into :_meta_group_names separated by '#' , :_meta_group_uris separated by '#'\
         from work._groups;\
      quit;\
\
      %* clean up;\
      proc datasets lib = work nolist;\
         delete _groups;\
      run;\
      quit;\
\
   %end;\
\
   %* if no person found write message to log;\
   %else %do;\
      %put INFO: &person was not found in the metadata;\
   %end;\
\
   %* write values for create macro variables to log;\
   %put INFO: _meta_person_name = &_meta_person_name;\
   %put INFO: _meta_person_uri = &_meta_person_uri;\
   %put INFO: _meta_group_num = &_meta_group_num;\
   %put INFO: _meta_group_names = &_meta_group_names;\
   %put INFO: _meta_group_uris = &_meta_group_uris;\
\
%mend meta_person;\
\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural

\b \cf0 \expnd0\expndtw0\kerning0
{\*\bkmkstart Potential_Problems_Solutions}Potential Problems & Solutions{\*\bkmkend Potential_Problems_Solutions}\
Tables with fixed headers\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural

\b0 \cf0 \expnd0\expndtw0\kerning0
One major problem I have found when developing web applications with SAS is that the tables produced by ODS HTML don\'92t fix the row and column headers. That means that if you have a very wide table and scroll to the right, then you no longer can see the row headers on the left. If your table is very long then as you scroll down you will lose the column headers and so can\'92t tell what the columns are for. SAS have provided a few solutions to this problem which can be found in the SAS usage notes.\
The first solution is to use a tagset provided by SAS which actually fixes the row and column headers. This tagset also does some other nice things, like allowing you to sort based on values in columns. I have found that this works well on small tables but once they get large it slows down a great deal and becomes almost unusable.\
The next solution is to effectively insert some JavaScript into the HTML table which fixes the position of the row headers and column headers relative to the web page. This works, but the headers appear to jerk about as you scroll \'96 which is not very pretty.
\b \expnd0\expndtw0\kerning0
\
Problems you might hit during development\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural

\i \cf0 \expnd0\expndtw0\kerning0
Handling different browsers\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural

\i0\b0 \cf0 \expnd0\expndtw0\kerning0
Different browsers behave in different ways and you can detect which browser you have and make allowances in your code. During development of my latest web application I tried to support a range of browsers, but discovered odd little differences between them in various areas. Something that worked in one browser would sometimes not work in another one \'96 and to fix it in the other one would require some special work around coding. In the end I decided to only support the company standard web browser, which was Internet Explorer 6, and that made life somewhat easier.\
You can see the browser compatibility tables\expnd0\expndtw0\kerning0
\super \
\expnd0\expndtw0\kerning0
\nosupersub  which show which browsers support the official web standards. It is interesting to note that no browser supports all the standards.\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural

\i\b \cf0 \expnd0\expndtw0\kerning0
Large graphs fail to be produced\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural

\i0\b0 \cf0 \expnd0\expndtw0\kerning0
We ran into some problems when trying to produce very large and complex graphs. Even though we had set the 
\b \expnd0\expndtw0\kerning0
memsize
\b0 \expnd0\expndtw0\kerning0
 option in SAS to allow 512meg of memory, we found that some graphs were running out of memory at a much lower level. I had decided to take advantage of the web page delivery by making some graphs very detailed and long, so that you would scroll down the web page to see them all. Anyway, after some investigation I discovered the 
\b \expnd0\expndtw0\kerning0
maxmemqry
\b0 \expnd0\expndtw0\kerning0
 SAS option, which sets the maximum amount of memory that a single SAS procedure can use. This had to be increased so I could produce my extra large and long graphs \'96 then all was well.\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural

\i\b \cf0 \expnd0\expndtw0\kerning0
Axis labels become too small\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural

\i0\b0 \cf0 \expnd0\expndtw0\kerning0
Early in development we were looking at a single clinical study, which didn\'92t produce particularly large graphs. But eventually we developed graphs that were comparing many treatments between many different studies. This meant that I ideally want to fit a lot more onto my graph. Producing a horizontal bar chart with 60 items being compared resulted in tiny almost unreadable axis labels. But then it occurred to me that I was using a web browser in which I had a limited width, but an unlimited length. As long as people didn\'92t have to scroll side-to-side, they would probably be happy scrolling down to see more details on a graph. So I set the graph ypixels to be very large and the x pixels to match the width of my screen (to allow for different resolutions). This let me make long graphs. To get the size of my screen (which may differ from user to user) I just used a simple bit of JavaScript which I then delivered to my stored process as a macro variable.\
I put the following macro in reports where I am creating graphs. A lot of my graphs were not appearing properly on low res screens, so I adjust the resolution for that. Also, when I change the _odsdest to send the graph to RTF then I adjust the resolution so that the graph comes out making full use of the page in RTF.\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural
\cf3 \expnd0\expndtw0\kerning0
%macro handle_low_res ;\
 %* handle low resolution screen ;\
  %if &_gopt_xpixels<450 %then\
    goptions xpixels=650 ypixels=425 ;\
  %else\
    %if &_gopt_xpixels<800 %then\
      goptions xpixels=875 ypixels=850 ;\
  ;\
 %* A4 sized graphs for RTF destination ;\
/*A4 in Pixels - 300 dpi (print) = 2480 X 3508 pixels */\
/*A4 in Pixels - 200 dpi (default for ODS RTF) =  8.3 x 11.7 inches = 1660 X 2340 pixels */\
 %* PA4 is largest paper format that can fit on both A4 and US Letter without resizing\
    it is 210mm x 280mm, 8.26771654in x 11.023622, 1653pixels x 2204pixels (RTF), ratio of 3:4 - which matches traditional TV screen ;\
  %if %upcase(&_odsdest)=RTF %then\
    %do ;\
      goptions xpixels=1900 ypixels=1425 ;\
      options orientation=landscape papersize=("280mm","210mm") ;\
    %end ;\
%mend handle_low_res ;\
\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural

\i\b \cf0 \expnd0\expndtw0\kerning0
Making graphs look good on UNIX, while still being produced fast\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural

\i0\b0 \cf0 \expnd0\expndtw0\kerning0
When developing an application for the web you have to consider various factors. Response time is one important one. People ideally want to see pretty and detailed graphics, but also want their graphics to arrive quickly. The slowest part of producing a graph and delivering it to a web browser is usually the network speed \'96 and so the size of the graph is a major factor. So it becomes a balancing act of weighing up the size of the graphic against the speed it takes to download.\
So, select a device driver that produces high quality, yet small file sizes.\
Another factor with selection of device driver is the support for fonts. Some device drivers support true type fonts, which usually look by far the best and lift the whole appearance of your graph. Other device drivers don\'92t support true type fonts and so you are reduced to using SAS software fonts, which often don\'92t produce very nice looking graphs.\
So, select a device driver that can use true type fonts.\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural

\i \cf2 \expnd0\expndtw0\kerning0
Getting True-type fonts to work in graphs\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural

\i0 \cf0 \expnd0\expndtw0\kerning0
When I initially began to produce graphs on UNIX (Solaris and AIX) I began to ran into problems with the use of fonts. If you use a SAS software font such as swiss, then that will work in all graphic devices (PNG, JPEG, BMP, TIFF, etc.). However if you want your graphs to look really good and use true-type fonts then you find that they just don\'92t work automatically in most devices. In fact they are not supported at all in most devices, but you can get them to work in certain ones. For instance you can define particular fonts to work with the PNG device, and I have done this but it is a little annoying. However if you use the SASEMF driver then any true-type fonts available on UNIX can be automatically used. At least this is true after they are imported into SAS. You must use 
\b \expnd0\expndtw0\kerning0
Proc fontreg
\b0 \expnd0\expndtw0\kerning0
 to import whichever fonts you want to use:\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural
\cf3 \expnd0\expndtw0\kerning0
proc fontreg ;\
  fontfile "/sas/general/fonts/arial.ttf" ;\
run;\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural
\cf0 \expnd0\expndtw0\kerning0
You can also just import all the fonts in a directory and then use any of them \'96 which is a bit less efficient if you have lots of fonts.\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural
\cf3 \expnd0\expndtw0\kerning0
proc fontreg ;\
  fontpath "/sas/general/fonts" ;\
run;\
\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural

\b \cf0 \expnd0\expndtw0\kerning0
{\*\bkmkstart Using_JavaScript_frameworks}Using JavaScript frameworks{\*\bkmkend Using_JavaScript_frameworks}\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural

\b0 \cf0 \expnd0\expndtw0\kerning0
There are many JavaScript frameworks (or libraries) available on the internet, mostly which are free. They provide a collection of pre-written JavaScript controls which allow us to build web applications much quicker than we could otherwise do so. We also need much less knowledge to make use of these frameworks than we would to write the functionality from scratch. Common frameworks are: Prototype, script.aculo.us, jQuery, Ext and Dojo Toolkit. There are even libraries available from Microsoft and Yahoo!. You can Google these and find out all about them. You will find that each offer a similar but different range of controls to do all manner of things. For those readers who are familiar with SAS/AF you can think of these libraries as adding SAS/AF functionality for web development.\
The one that we have most recently chosen to use is called Ext-js, and you can find it at {\field{\*\fldinst{HYPERLINK "http://sencha.com/"}}{\fldrslt \expnd0\expndtw0\kerning0
http://s\ul encha\ulnone .com/}}. \
This framework has many features available that make building applications much easier. One of the key things that I have used is a JavaScript layout. It lets me design a screen where I can have different parts of the screen used for different things. In the screen shot to the left you can see how we have two areas on the left, including the top one in which items can be expanded and collapsed. On the right we have tabs, and within tabs we have other tabs with various content.\
All of this kind of layout can be used with your SAS application. We have a SAS macro that builds the overall layout with various elements we want defined. Then we populate various parts of the framework by calling stored processes within them. For instance, the area in the screen shot about called \'93north\'94 could contain the output of a stored process. That might let you make some selections and submit them, which could then run a stored process in the area called \'93west\'94 that would display the HTML generated. This makes for a very powerful and flexible layout which can produce all kinds of applications.\
\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural

\i\b \cf0 \expnd0\expndtw0\kerning0
{\*\bkmkstart Building_interactivity_using_JavaScript}Building interactivity using JavaScript{\*\bkmkend Building_interactivity_using_JavaScript}\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural
\cf2 \expnd0\expndtw0\kerning0
Popup windows\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural

\i0\b0 \cf0 \expnd0\expndtw0\kerning0
Sometimes you will want a secondary window to pop up so that you can make some selections before going back to a main window and applying those selections. This can be done from JavaScript by using window.open. The following line of code shows how we write some JavaScript which opens a stored process in a new window which is small like a popup window.  \
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural
\cf3 \expnd0\expndtw0\kerning0
Data _null_ ;\
  File _webout ;\
  put "<a href='#' onClick='window.open(""http://&_srvname:&_srvport/SASStoredProcess/do?_program=SBIP%3A%2F%2FFoundation%2F&env.%2Fbis%2Fmedmon%2Flb_boxplotgroup%28StoredProcess%29""," ;\
  put """Menu"",""menubar=no,width=430,height=360,toolbar=no"") ;'>" ;\
 run ;\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural

\i\b \cf2 \expnd0\expndtw0\kerning0
Providing status updates\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural

\i0\b0 \cf0 \expnd0\expndtw0\kerning0
At the bottom left of a web page there is a status area. You can write to this area using JavaScript. There was a macro that used this on a prior page.\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural
\cf2 \expnd0\expndtw0\kerning0
window.status=\'94This is a message\'94.\cf0 \expnd0\expndtw0\kerning0
\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural

\i\b \cf0 \expnd0\expndtw0\kerning0
Having multiple buttons on a screen to do different things\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural

\i0\b0 \cf0 \expnd0\expndtw0\kerning0
I have a filter builder which builds up a complex form for all the user selections. One of the nice features of this is the ability to click on a plus or minus icon to add a new filter line or remove one. These buttons are able to do different things by using the 
\b \expnd0\expndtw0\kerning0
onClick
\b0 \expnd0\expndtw0\kerning0
 attribute to specify some JavaScript to run when they are clicked on. The JavaScript goes and updates a hidden text fields to indicate if the plus or minus was clicked on, and which line it was on. The icon is also a submit button and so the form is submitted with the modified fields so that the stored process can then act on that information.\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural

\b \cf0 \expnd0\expndtw0\kerning0
Example of simple Javascript interactivity
\b0 \expnd0\expndtw0\kerning0
\
The following sample code demonstrates a range of things that can be done using Javascript to add some interactivity. I shall describe each of the features used and what it achieves.\
\pard\tx720\li720\sl480\slmult1\ql\qnatural\pardirnatural
\ls8\ilvl0\cf0 \kerning1\expnd0\expndtw0 {\listtext	1)	}In the body section we use onload, which will run a javascript function when the HTML page has completed loading. Very useful if you want something to be done once your page loads. We are just using an alert function here which pops up a box with the text in it.\
{\listtext	2)	}Also in the body section we use onunload, which will run a function when the HTML page has been unloaded - which means when it has been closed.\
{\listtext	3)	}We specify onkeypress, which will run the code every time a key is pressed. This will just write in the message area at the bottom of the screen what key was just pressed. This is usually used in case you want to intercept the press of a key and do something based on it. For instance if you displayed a menu then just by pressing \'913\'92 you could link to the item at number 3.\
{\listtext	4)	}The onkeyup will run the code specified every time a key that has been pressed is released - and so it comes up. So onkeypress can run code when you press the key down, and onkeyup when you release it. This gives you a lot of control. In this example we run a javascript function called checkkey. It will check the key that was released and display a message only for the \'91X\'92 key.\
{\listtext	5)	}The onmouseover function is used when the mouse moves over the HTML item in which this was specified. Here we use it on a link, and so if we move the mouse over that link then the specified code will run. In this case it runs a function called open_popup, and displays a message at the bottom of the screen.\
{\listtext	6)	}The onmouseout function is used to detect when the mouse moves away from the HTML item in which it was used. So in our example here we call close_popup, which closes the popup window which our open_popup function openned. This means that moving the mouse over the link opens a window, and moving it off that link closes the window.\
{\listtext	7)	}Next we use the onmousedown function to open a window when the mouse button is pressed down.\
{\listtext	8)	}Then we use the onmouseup function to close the window when the mouse button is released.\
{\listtext	9)	}You will also see in the open_popup function that the function we use to open the window has a lot of parameters that will let us open windows with all kinds of things present or not.\
{\listtext	10)	}Note also that we use a data _null_ step to read in all the cookies that are defined and to write them out onto the web page.\expnd0\expndtw0\kerning0
\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural
\cf0 \highlight5 \expnd0\expndtw0\kerning0
*ProcessBody;\
\
data _null_ ;\
  input ;\
  file _webout ;\
  put _infile_ ;\
cards4 ;\
<html>\
<head>\
<script type='text/javascript'>\
var popwin = null ;\
\
function open_popup()\
\{\
  if (popwin == null)\
    popwin = window.open('http://xs103:8080/SASStoredProcess1/do?_program=SBIP://Foundation/cmis/info(StoredProcess)','','top=150,left=350,width=250,height=50,status=0,toolbar=0,location=0,menubar=0,directories=0,resizable=0,scrollbars=0') ;\
\}\
\
function close_popup()\
\{\
  if (popwin != null)\
    \{popwin.close() ; popwin = null;\}\
\}\
function checkKey()\
\{\
  var key=String.fromCharCode(window.event.keyCode) ;\
  if (key == 'X')\
    \{ alert("You pressed the X key") ; \}\
\}\
\
</script>\
</head>\
<body onload='alert("finished loading");' onunload='alert("finished unloading");'\
      onkeypress='window.status="key pressed is: " + String.fromCharCode(window.event.keyCode) ;'\
      onkeyup='window.status="key up"; checkKey() ;'>\
Pop-up a window with information by moving over <a href='#' \
      onmouseover='open_popup(); window.status="Hovering over the link" ; return true ;'\
      onmouseout='close_popup(); window.status=" " ; return true ;'>here</a>.\
<p>\
Pop-up a window with information by clicking <a href='#' onmousedown='open_popup();' onmouseup='close_popup();'>here</a>.\
<p>\
<a href='#' ondblclick='open_popup();'>Double click to open</a>, <a href='#' onclick='close_popup();'>single click to close here</a>.\
<p>\
<a href='#' style='font-size="x-large"' onmousemove='open_popup();'>Move mouse over this to open</a>, <a style='font-size="x-large"' href='#' onmousemove='close_popup();'>move over this to close</a>.\
<p>\
Press <b>X</b> to make an alert window pop up.\
;;;;\
run ;\
\
data _null_ ;\
  file _webout ;\
  put '<h1>Cookies</h1>' ;\
  htcook=htmldecode("&_htcook") ;\
  put htcook ;\
  put '</body>' ;\
  put '</html>' ;\
run ;\
%STPBEGIN;\
%STPEND;\
*';*";*/;run;\
\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural

\b \cf0 \highlight1 \expnd0\expndtw0\kerning0
{\*\bkmkstart Making_use_of_extjs_from_Stored_processes}Making use of ext-js from Stored processes{\*\bkmkend Making_use_of_extjs_from_Stored_processes}\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural

\b0 \cf0 \expnd0\expndtw0\kerning0
One of the most useful things that I have discovered in the last 2 years, since I last did a paper on this topic, is how to really use JavaScript and Flash objects from stored processes. By learning how to make SAS drive these web technologies is very powerful. Traditionally with SAS 8 and beyond we have been able to quite simply have SAS generate HTML to provide output for the web. Through the graphic device drivers available we have been able to add some interactivity very simply by taking advantage of the ActiveX and Java device drivers. These allow us to make a range of graphs which then provide some very good interactive functionality. This is great but has some problems. ActiveX is only supported on Windows platforms, which can be limiting. There is also a potential problem in that data can be edited using the ActiveX driver, and so output can be changed by the end user. There are a range of features available in each, which can be great for users but which you may not want to make available to users.\
If users wanted to go beyond interactivity provided through the HTML ODS tag sets and ActiveX/Java drivers, then they would need to do some work and have a far greater understanding of further technologies in order to achieve this. A range of techniques can be used to do this including the following:\
\pard\tx720\li720\sl480\slmult1\ql\qnatural\pardirnatural
\ls9\ilvl0\cf0 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Interfacing to another tool (such as EXCEL) and creating your output there via DDE, OLE, VBA or other techniques\expnd0\expndtw0\kerning0
\dn2 \
\ls9\ilvl0\kerning1\expnd0\expndtw0 \up0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Creating a custom tagset, perhaps modified from an existing one, in order to implement further functionality\expnd0\expndtw0\kerning0
\dn2 \
\ls9\ilvl0\kerning1\expnd0\expndtw0 \up0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Passing raw markup to your output in order to add functionality (e.g. passing raw RTF to MS Word)\expnd0\expndtw0\kerning0
\dn2 \
\ls9\ilvl0\kerning1\expnd0\expndtw0 \up0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Creating custom Javascript within HTML to implement any required functionality\expnd0\expndtw0\kerning0
\dn2 \
\ls9\ilvl0\kerning1\expnd0\expndtw0 \up0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Creating HTML to make use of features like the HTML 5 Canvas element (see paper by Edwin van Stein, Astellas).\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural
\cf0 \expnd0\expndtw0\kerning0
\dn2 \
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural
\cf0 \expnd0\expndtw0\kerning0
\up0 Two other methods that I have found which I prefer are: Generating Ext-js code and using Flash objects. Why these two? Well, ext-js is a Javascript framework which provides a large number of objects that can be used to build an application. There are many javascript frameworks, and so people will have their favourites, but I chose extjs by surveying the most popular ones and then looking at the application building functionality that each provided at that time. extjs provided far more than most others, and at the time of writing I think it still does. As for Flash, there are a lot of products (some which are free) that provide graph functionality in the form of a flash object. They then provide various ways to provide data to the flash object and to control its functionality with simple javascript calls. There are Flash objects that provide other functionality too, besdies graphs. Both ext-js and Flash will give you a huge amount of functionality with fairly minimal coding.\
\
{\*\bkmkstart Generating_extjs_code}Generating Ext-JS code{\*\bkmkend Generating_extjs_code}\
In order to do something in extjs you will usually need some data and some directives telling extjs what you want to do with the data. \
One simple way to provide data to EXT-js is by using arrays in javascript. For example you could use some lines like these \'85.\
\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural
\cf0 \highlight4 \kerning1\expnd0\expndtw0     // sample static data for the store\
    var myData = [\
        ['3m Co',                               71.72, 0.02,  0.03,  '9/1 12:00am'],\
        ['Alcoa Inc',                           29.01, 0.42,  1.47,  '9/1 12:00am'],\
        ['United Technologies Corporation',     63.26, 0.55,  0.88,  '9/1 12:00am'],\
        ['Verizon Communications',              35.57, 0.39,  1.11,  '9/1 12:00am'],            \
        ['Wal-Mart Stores, Inc.',               45.45, 0.73,  1.63,  '9/1 12:00am']\
    ];\
\
    // create the data store\
    var store = new Ext.data.ArrayStore(\{\
        fields: [\
           \{name: 'company'\},\
           \{name: 'price',      type: 'float'\},\
           \{name: 'change',     type: 'float'\},\
           \{name: 'pctChange',  type: 'float'\},\
           \{name: 'lastChange', type: 'date', dateFormat: 'n/j h:ia'\}\
        ]\
    \});\
\
    // manually load local data\
    store.loadData(myData);\highlight1 \
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural
\cf0 \expnd0\expndtw0\kerning0
\
\
However a better and more flexible way would be to use a data store. The simplest data store is a JSON data store. You may be wondering what a JSON data store is. 
\b \kerning1\expnd0\expndtw0 JSON
\b0  (JavaScript Object Notation) is a lightweight data-interchange format. It is easy for humans to read and write. It is easy for machines to parse and generate. JSON is a text format that is completely language independent but uses conventions that are familiar to programmers of the C-family of languages, including C, C++, C#, Java, JavaScript, Perl, Python, and many others. These properties make JSON an ideal data-interchange language.\
JSON is built on two structures:\
\pard\tx720\li720\sl480\slmult1\ql\qnatural\pardirnatural
\ls10\ilvl0\cf0 {\listtext	\'95	}A collection of name/value pairs. In various languages, this is realized as an 
\i object
\i0 , record, struct, dictionary, hash table, keyed list, or associative array.\
{\listtext	\'95	}An ordered list of values. In most languages, this is realized as an 
\i array
\i0 , vector, list, or sequence.\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural
\cf0 A simple JSON data store might look like this\'85\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural
\cf0 \highlight4 \{\'91TotalCount\'92:\'922\'92,\
  'metaData':\{'root':'rows', 'fields':["id","month","sales","wages"]	\},\
  'rows':[\{"id":"1", "month":"1", "sales": 600, "wages": 900\},\
		 \{"id": "2", "month":"2", "sales": 800, "wages": 1300\}	] 	\}\highlight1 \
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural
\cf0 \expnd0\expndtw0\kerning0
\
A JSON data store can be created by a SAS program, written to a file on the server and then used by the stored process that makes the grid. As an example, lets look at how to make a grid/table in extjs. The following HTML (put together by Dimitri Woei) shows what is involved in doing this. All the lines are well commented, so if you work through this carefully you will see exactly what it is all doing. The \
\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural
\cf0 \highlight5 \expnd0\expndtw0\kerning0
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" \
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">\
<html>\
   <head>\
      <title>ExtJS Grid - SAS Dataset Example</title>\
      <!-- ExtJs libraries -->\
      <link rel="stylesheet" type="text/css" href="/extjs/resources/css/ext-all.css"/>\
      <script type="text/javascript" src="/extjs/adapter/ext/ext-base.js"></script>\
      <script type="text/javascript" src="/extjs/ext-all-debug.js"></script>\
      \
      <script type="text/javascript">\
         Ext.onReady(function()\{ /* When all ExtJS stuff is loaded we can start defining our application */\
            var sasdatasetStore = new Ext.data.JsonStore(\{ /* data store necessary to load data from the server */\
               id : 'sasdatasetStore' /* id is a unique id of the component so we can later reference it using Ext.getCmp('sasdatasetStore') */\
              ,url: 'dimitri_grid.json' /* stored process to retrieve data */\
              ,reader: new Ext.data.JsonReader(\{ /* reader to process the json data */\
                  root: 'rows', /* The property in the JSON data which contains an Array of record objects */\
                  id: 'name' /* name of the value which is used as id */\
               \}, ['name', 'sex', 'age']) /* names of the values */\
            \});\
            \
            sasdatasetStore.load(); /* load data from server */\
            \
            var mainwin = new Ext.Window(\{ /* Create a window where we put everything, we can later reference this window with the variable name mainwin */\
               xtype  : 'window' /* xtype defines the component type*/\
              ,id     : 'main_win' /* id is a unique id of the component so we can later reference it using Ext.getCmp('main_win') */\
              ,title  : 'ExtJS Grid - Simple Example' /* title of the window */\
              ,width  : 318 /* width of the window self explainatory */\
              ,height : 480 /* height of the window self explainatory */\
              ,resizable: false /* configure window not to be resizable (default=true)*/\
              ,layout : 'absolute' /* layout type absolute, we need to specify the positions of the components. */\
              ,closeAction: 'hide' /* when we close the window it becomes hidden, so we don't need to create a new object next time we open it*/\
              ,closable : true /* x mark in the top left corner to close the window (default) */\
              ,items  : [ /* here we define the components in the window */\
                  \{ /* grid to show data */\
                      xtype: 'editorgrid' /* this type of grid allows you to edit the fields */\
                     ,id: 'exampleGrid' /* id is a unique id of the component so we can later reference it using Ext.getCmp('exampleGrid') */\
                     ,title: 'People in my family' /* we can put the name of the table here as a title */\
                     ,height: 450\
                     ,width: 304\
                     ,store: sasdatasetStore /* data store containing the data */\
                     ,columns: [ /* define the columns shown in the grid */\
                          \{\
                              xtype: 'gridcolumn'\
                             ,dataIndex: 'name' /* name of the variable used as an index*/\
                             ,header: 'Name' /*label of the column header*/\
                             ,width: 100\
                             ,editor: \{ xtype: 'textfield' \} /* we want to use a textfield as an editor */\
                          \}\
                         ,\{\
                              xtype: 'gridcolumn'\
                             ,dataIndex: 'sex' /* name of the variable used as an index*/\
                             ,header: 'Sex' /*label of the column header*/\
                             ,width: 100\
                             /* we didn't specify an editor, so this field is not editable */\
                          \}\
                         ,\{\
                              xtype: 'gridcolumn'\
                             ,dataIndex: 'age' /* name of the variable used as an index*/\
                             ,header: 'Age' /*label of the column header*/\
                             ,width: 100\
                             ,editor: \{ xtype: 'numberfield' \} /* we want to use a textfield as an editor, which allows only numbers */\
                          \}\
                      ]\
                     ,sm: new Ext.grid.RowSelectionModel(\{ /* selection model needed to handle event when data is selected */\
                         singleSelect: true /* only one row can be selected at a time */\
                        ,listeners: \{\
                             rowselect: \{\
                                fn: function(sm, index, record) \{\
                                    /* add your code here what to do when a row is selected*/\
                                \}\
                             \}\
                            ,rowdeselect: \{\
                                fn: function (sm, index, record) \{\
                                   /* add your code here what to do when a row is deselected*/\
                                \}\
                             \}\
                          \}\
                      \})\
                  \}\
               ]\
            \});\
            mainwin.show(); /* show the window */\
         \});\
      </script>\
      \
   </head>\
<body>\
\
</body>\
</Html>\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural
\cf0 \highlight1 \expnd0\expndtw0\kerning0
\
Once you understand the basic way that you can use an object like this, then it is quite easy to translate this into a stored process, so that SAS can do the same. This can be very simply done by adding the following code in front of the HTML code that you are using\'85\
\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural
\cf0 \highlight5 \expnd0\expndtw0\kerning0
*ProcessBody;\
\
/* generate html code */\
data html_code;\
   infile datalines4 length=l;\
   input #1 htmlline $varying400. l;\
datalines4;\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural
\cf0 \highlight1 \expnd0\expndtw0\kerning0
\
And then add the next code after the HTML code you are using\'85\
\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural
\cf0 \highlight4 \expnd0\expndtw0\kerning0
;;;;\
run;\
/* stream html code to browser */\
data _null_;\
   file _webout;\
   set html_code;\
   put htmlline;\
run;\
*';*";*/;run;\highlight1 \expnd0\expndtw0\kerning0
\
\
This then gives you the SAS Stored Process code required to run a Stored Process, putting all your HTML code into a dataset, and then writing it to the web browser. You can see how this technique can easily then be extended to create parts of the HTML and Javascript code before it is written out.\
\
\
An even better way to do this is to have another SAS stored process generate the JSON data store on the fly. A stored process to make a JSON data store could look like this.\
\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural
\cf0 \highlight5 \expnd0\expndtw0\kerning0
*ProcessBody;\
\
/* stream data to browser in JSON format */\
data _null_;\
   file _webout;\
   set sashelp.class end=last;\
   if _n_ =1 then\
      put "\{ success:true, rows:["; /* return data retrieved was a success, rows is an array containing all the data */\
   else\
      put ","; /* seperator for each row in the data */\
   put "\{ name: '" name+(-1) "', sex: '" sex+(-1) "', age: '" age+(-1) "'\}";\
   if last then\
     put "]\}"; /* close array and JSON dataset */\
run;\
*';*";*/;run;\highlight1 \expnd0\expndtw0\kerning0
\
\
The extjs to use this would then look like this. It could replace the extjs for the sasdatasetStore variable that was shown in the previous complete version.\
\
\highlight5 \expnd0\expndtw0\kerning0
            var sasdatasetStore = new Ext.data.Store(\{ /* data store necessary to load data from the server */\
               id : 'sasdatasetStore' /* id is a unique id of the component so we can later reference it using Ext.getCmp('sasdatasetStore') */\
              ,url: 'do?_program=/CBA/dimitri_test2' /* stored process to retrieve data */\
              ,reader: new Ext.data.JsonReader(\{ /* reader to process the json data */\
                  root: 'rows', /* The property in the JSON data which contains an Array of record objects */\
                  id: 'name' /* name of the value which is used as id */\
               \}, ['name', 'sex', 'age']) /* names of the values */\
            \});\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural
\cf0 \highlight1 \expnd0\expndtw0\kerning0
\
You could also create a macro to create JSON data stores, so then it could be used in various stored processes as require. All of this means that by building 2 stored processes you can make a single URL that can be called and will deliver a nice looking grid with all the functionality that the extjs grid provides as standard, including:\
\pard\tx720\li720\sl480\slmult1\ql\qnatural\pardirnatural
\ls11\ilvl0\cf0 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
column sorting, on host or client\expnd0\expndtw0\kerning0
\dn2 \
\ls11\ilvl0\kerning1\expnd0\expndtw0 \up0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
excluding columns\expnd0\expndtw0\kerning0
\dn2 \
\ls11\ilvl0\kerning1\expnd0\expndtw0 \up0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
paging long tables\expnd0\expndtw0\kerning0
\dn2 \
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural
\cf0 \expnd0\expndtw0\kerning0
\up0 There are many other features that can be added to extjs grids by adding a little more complexity to your javascript. This can then achieve things like traffic lighting, putting special objects into table cells and so on.\
\
As an example, the following code shows how to implement traffic lighting with an extjs grid.\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural
\cf0 \highlight4 \kerning1\expnd0\expndtw0     function change(val) \{\
        if (val > 0) \{\
            return '<span style="color:green;">' + val + '</span>';\
        \} else if (val < 0) \{\
            return '<span style="color:red;">' + val + '</span>';\
        \}\
        return val;\
    \}\
\
    /**\
     * Custom function used for column renderer\
     * @param \{Object\} val\
     */\
    function pctChange(val) \{\
        if (val > 0) \{\
            return '<span style="color:green;">' + val + '%</span>';\
        \} else if (val < 0) \{\
            return '<span style="color:red;">' + val + '%</span>';\
        \}\
        return val;\
    \}\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural
\cf0 \highlight1 \expnd0\expndtw0\kerning0
\
The best place to find useful examples of Extjs is in the samples section of their web site, which contains many samples along with full source code. {\field{\*\fldinst{HYPERLINK "http://www.sencha.com/products/extjs/examples/"}}{\fldrslt \expnd0\expndtw0\kerning0
http://www.sencha.com/products/extjs/examples/}}\
\
\
\
\
{\*\bkmkstart Using_extjs_Flash_Graphs}Another great thing you can do with extjs is graphics. This is really a cross over area between Flash and extjs since extjs implements its graphs using flash technology. \kerning1\expnd0\expndtw0 Extjs provides some flash objects to implement their graphics in extjs version 3. However in version 4, which came out early 2011 they have changed to a completely javascript based graph technology. However extjs 3 provides a nice way to demonstrate how to do graphs in extjs with flash.{\*\bkmkend Using_extjs_Flash_Graphs}\
The following code is a very simple example (put together by Chris Brooks) which demonstrates almost the bare minimum required to produce an extjs Graph. The HTML (with javascript embedded) also required another file which has the JSON data.\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural
\cf0 \highlight4 <html>\
<head>\
	<title>Chart Example</title>\
	<link rel="stylesheet" type="text/css" href="extjs/resources/css/ext-all.css" />\
	<script type="text/javascript" src="extjs/adapter/ext/ext-base.js"></script>\
	<script src="extjs/ext-all-debug.js"></script>\
	\
	<script type="text/javascript">\
\
        Ext.BLANK_IMAGE_URL = "extjs/images/default/s.gif";\
        Ext.chart.Chart.CHART_URL = "extjs/resources/charts.swf";\
	\
	Ext.onReady(function()\{\
		\
		\
		var figstore = new Ext.data.JsonStore(\{\
			url: 'figures.json',\
			root: 'rows',\
		//	fields: ['id', 'month', 'sales', 'wages', 'red', 'amber', 'green'],\
		\
			autoLoad: true\
		\});\
		\
				\
		var pnl = new Ext.Panel(\{\
			title: "Monthly Figures",\
			renderTo: Ext.getBody(),\
			width: 500,\
			height: 300,\
			layout: 'fit',\
			items: \{ \
				xtype: 'linechart',\
				store: figstore,\
				xField: 'month',\
				padding:0,\
				\
				yAxis: new Ext.chart.NumericAxis(\{\
					title: "Figures",\
					majorUnit: 500,\
					labelRenderer: Ext.util.Format.numberRenderer("0,0")\
				\}),\
				xAxis: new Ext.chart.CategoryAxis(\{\
					title:'Month'\
				\}),\
				\
				series: [\
					\{\
					// type: 'column',\
					displayName: "sales",\
					yField: 'sales',\
					style: \{color: '#000000'\}\
					\},\
					\{\
					\
					displayName: "wages",\
					yField: 'wages',\
					style: \{color: '#FF00FF',size:5\}\
					\}\
				],\
				extraStyle:\{\
					legend: \{\
						display: 'bottom'\
					\}\
				\}\
			\}\
		\});\
	\});\
	</script>\
</head>\
\
<body>\
\
</body>\
</html>\highlight1 \
The following is the JSON data file.\
\highlight4 \{\
	'totalCount':'5',\
	'metaData':\{\
		'root':'rows',\
		'fields':["id","month","sales","wages"]\
	\},\
	'rows':[\
		\{\
			"id":"1",\
			"month":"1",\
			"sales": 600,\
			"wages": 900\
		\},\
		\{\
			"id":"2",\
			"month":"2",\
			"sales": 750,\
			"wages": 1000\
		\},\
		\{\
			"id":"3",\
			"month":"3",\
			"sales": 800,\
			"wages": 1050\
		\},\
		\{\
			"id":"4",\
			"month":"4",\
			"sales": 850,\
			"wages": 1300\
		\},\
		\{\
			"id":"5",\
			"month":"5",\
			"sales": 1000,\
			"wages": 1300\
		\},\
		\{\
			"id":"6",\
			"month":"6",\
			"sales": 1200,\
			"wages": 1300\
		\},\
		\{\
			"id":"7",\
			"month":"7",\
			"sales": 1350,\
			"wages": 1300\
		\},\
		\{\
			"id":"8",\
			"month":"8",\
			"sales": 1450,\
			"wages": 1300\
		\},\
		\{\
			"id":"9",\
			"month":"9",\
			"sales": 1750,\
			"wages": 1300\
		\},\
		\{\
			"id":"10",\
			"month":"10",\
			"sales": 2000,\
			"wages": 1300\
		\},\
		\{\
			"id":"11",\
			"month":"11",\
			"sales": 2200,\
			"wages": 1300\
		\},\
		\{\
			"id":"12",\
			"month":"12",\
			"sales": 2500,\
			"wages": 1300\
		\}\
	]\
\}\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural
\cf0 \highlight1 \
\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural
\cf0 \expnd0\expndtw0\kerning0
{\*\bkmkstart Using_Flash_objects}Using Flash objects {\*\bkmkend Using_Flash_objects}\
To use flash objects from a web browser we need some HTML and Javascript with a few key sections in it. There will usually be examples and documentation that make getting started quite easy. As an example we are going to look at using XML/SWF charts. The web site for this product is at {\field{\*\fldinst{HYPERLINK "http://www.maani.us/xml_charts/index.php"}}{\fldrslt \expnd0\expndtw0\kerning0
http://www.maani.us/xml_charts/index.php}} - you can go there and see many useful examples, clear documentation and grab the code.\
The following is some HTML which will enable a flash graph to be generated. The way this product works is that you specify certain things in the HTML, and then provide an XML file with directives and data to make your graph. A few useful things in the HTML are highlighted:\
\pard\tx720\li720\sl480\slmult1\ql\qnatural\pardirnatural
\ls12\ilvl0\cf0 \kerning1\expnd0\expndtw0 {\listtext	\'95	}Width will define how many pixels wide your graph is\
{\listtext	\'95	}Height defines the height of your graph\
{\listtext	\'95	}Bgcolor defines the background color to be used\
{\listtext	\'95	}Xml_source defines where the XML file is which describes how to make your graph, and contains data\expnd0\expndtw0\kerning0
\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural
\cf0 \expnd0\expndtw0\kerning0
\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural
\cf0 \highlight5 \expnd0\expndtw0\kerning0
<HTML>\
<script language="javascript">AC_FL_RunContent = 0;</script>\
<script language="javascript"> DetectFlashVer = 0; </script>\
<script src="AC_RunActiveContent.js" language="javascript"></script>\
<script language="JavaScript" type="text/javascript">\
<!--\
var requiredMajorVersion = 10;\
var requiredMinorVersion = 0;\
var requiredRevision = 45;\
-->\
</script>\
<BODY bgcolor="#FFFFFF">\
\
\
<script language="JavaScript" type="text/javascript">\
<!--\
if (AC_FL_RunContent == 0 || DetectFlashVer == 0) \{\
	alert("This page requires AC_RunActiveContent.js.");\
\} else \{\
	var hasRightVersion = DetectFlashVer(requiredMajorVersion, requiredMinorVersion, requiredRevision);\
	if(hasRightVersion) \{ \
		AC_FL_RunContent(\
			'codebase', 'http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=10,0,45,2',\
			'
\b \highlight5 \expnd0\expndtw0\kerning0
width
\b0 \highlight5 \expnd0\expndtw0\kerning0
', '400',\
			'
\b \highlight5 \expnd0\expndtw0\kerning0
height
\b0 \highlight5 \expnd0\expndtw0\kerning0
', '250',\
			'scale', 'noscale',\
			'salign', 'TL',\
			'
\b \highlight5 \expnd0\expndtw0\kerning0
bgcolor
\b0 \highlight5 \expnd0\expndtw0\kerning0
', '#777788',\
			'wmode', 'opaque',\
			'movie', 'charts',\
			'src', 'charts',\
			'FlashVars', 'library_path=charts_library&
\b \highlight5 \expnd0\expndtw0\kerning0
xml_source=sample.xml
\b0 \highlight5 \expnd0\expndtw0\kerning0
', \
			'id', 'my_chart',\
			'name', 'my_chart',\
			'menu', 'true',\
			'allowFullScreen', 'true',\
			'allowScriptAccess','sameDomain',\
			'quality', 'high',\
			'align', 'middle',\
			'pluginspage', 'http://www.macromedia.com/go/getflashplayer',\
			'play', 'true',\
			'devicefont', 'false'\
			); \
	\} else \{ \
		var alternateContent = 'This content requires the Adobe Flash Player. '\
		+ '<u><a href=http://www.macromedia.com/go/getflash/>Get Flash</a></u>.';\
		document.write(alternateContent); \
	\}\
\}\
// -->\
</script>\
<noscript>\
	<P>This content requires JavaScript.</P>\
</noscript>\
\
</BODY>\
</HTML>\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural
\cf0 \highlight1 \expnd0\expndtw0\kerning0
\
The simplest possible XML file you can specify is as follows.\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural
\cf0 \highlight4 \expnd0\expndtw0\kerning0
<chart>\
</Chart>\highlight1 \expnd0\expndtw0\kerning0
\
This file will use some sample data, and make a sample graph. \
\
In this following piece of code we define data for 3 regions (A, B & C) over 4 years. We then use a chart_type XML element to say that we want the first region to be a line chart, and the other two to be column charts (vertical bars). You can see how easy it is to define the data and type of graph. \
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural
\cf0 \highlight4 \kerning1\expnd0\expndtw0 <chart>\
\
   <chart_data>\
      <row>\
         <null/>\
         <string>2006</string>\
         <string>2007</string>\
         <string>2008</string>\
         <string>2009</string>\
      </row>\
      <row>\
         <string>Region A</string>\
         <number>5</number>\
         <number>10</number>\
         <number>30</number>\
         <number>63</number>\
      </row>\
      <row>\
         <string>Region B</string>\
         <number>40</number>\
         <number>20</number>\
         <number>65</number>\
         <number>90</number>\
      </row>\
      <row>\
         <string>Region C</string>\
         <number>56</number>\
         <number>35</number>\
         <number>40</number>\
         <number>90</number>\
      </row>\
   </chart_data>\
   \
   <chart_type>\
      <string>line</string>\
      <string>column</string>\
      <string>column</string>\
   </chart_type>\
\
</chart>\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural
\cf0 \highlight1 \expnd0\expndtw0\kerning0
\
This has shown how to make a very simple graph. You can imagine how with SAS it is very easy to generate an XML file in which we can take a SAS dataset and produce all the data in this XML format. We can then add any other XML tags in to make the graph that we desire. We end up with a high quality and highly interactive Flash based graph.\
\
There are many good sources of flash objects that can be used when building applications. Some that I think are good and have used are:\
\pard\tx720\li720\sl480\slmult1\ql\qnatural\pardirnatural
\ls13\ilvl0\cf0 \expnd0\expndtw0\kerning0
{\listtext	\'95	}SWF/Flash\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural
\cf0 \expnd0\expndtw0\kerning0
{\*\bkmkstart Risks}Risks{\*\bkmkend Risks}\
When an innovative new solutions is proposed at a company good managers will usually ask what the risks involved are. For instance, if you press ahead with building an application that uses Ext-js, Javascript, Flash, HTML and SAS then what can go wrong? Well, based on my experience using this technology at 4 companies I would suggest the following:\
\pard\tx720\li720\sl480\slmult1\ql\qnatural\pardirnatural
\ls14\ilvl0\cf0 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Browser lacks functionality or has bugs. IE6 is still the standard for many companies although it is no longer supported by Microsoft and has many bugs and vulnerabilities. Supporting this has proved to be a real headache at several of my clients.\
\ls14\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Flash unavailable to users and they cant install it.\
\ls14\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Lacking proper web development tools such as Javascript debuggers and IDE.\
\ls14\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Costs involved with various tools. For some large companies, it doesn't matter how expensive a tool is but merely that there is a cost.\
\ls14\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Introducing new tools/products to a controlled environment. In some companies there is a long and involved process involved in getting a new product accepted. Sometimes there are also support implications such as increased costs.\
\ls14\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Tools such as extjs which are free if you make your code public. Some companies have a problem with making their code available to others, although they like the idea of having their software for free.\expnd0\expndtw0\kerning0
\dn2 \
\ls14\ilvl0\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural
\cf0 \page \pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural

\b \cf0 \expnd0\expndtw0\kerning0
\up0 {\*\bkmkstart Conclusion}CONCLUSION{\*\bkmkend Conclusion}\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural

\b0 \cf0 \expnd0\expndtw0\kerning0
This paper attempts to give some insight into a very large topic \'96 web development using SAS - more specifically it aims to show some techniques for using Javascript and Flash in your SAS applications. It is not only a large topic, but a fast evolving one. That means that by the time you read this, it may not be totally up to date. I hope it has given you some insight into what can be done and how. To the uninitiated it may seem that SAS is not the best tool to develop a web application. In fact I have run into experienced java developers who have refused to believe this until the evidence was collected and beat over their heads \'96 but we had java developers come to love SAS.\
The key to the power of SAS as a web application enabler is the Stored Process web application. Using that it is very easy to make a web based application. By adding some Javascript to your application you can add more interactivity and automation. By adding some Flash graphics to your application you can get powerful interactive graphs. Combining these techniques you can build a web application as good as anything on offer today.\
\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural

\b \cf0 \expnd0\expndtw0\kerning0
{\*\bkmkstart References}References{\*\bkmkend References}
\b0 \expnd0\expndtw0\kerning0
\
There are some very useful sections in the documentation on the SAS web site.\
Creating Stored Processes - http://support.sas.com/rnd/itech/doc9/dev_guide/stprocess/program.html\
Building a Web Application - http://support.sas.com/rnd/itech/doc9/dev_guide/stprocess/webapp.html\

\b \expnd0\expndtw0\kerning0
Recommended Reading
\b0 \expnd0\expndtw0\kerning0
 \
Visual Quickstart Guide: CSS, DHTML & AJAX, by Cranford & Teague\
Visual Quickstart Guide: HTML, XHTML & CSS, by Castro\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural
\cf0 \
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural

\b \cf0 \expnd0\expndtw0\kerning0
{\*\bkmkstart Contact_Information}Contact Information{\*\bkmkend Contact_Information}\
\pard\tx720\fi720\sl480\slmult1\ql\qnatural\pardirnatural

\b0 \cf0 \expnd0\expndtw0\kerning0
Your comments and questions are valued and encouraged. Contact the author at:\
Name: 	Philip Mason\
Enterprise: 	Wood Street Consultants Limited\
Address: 	16 Wood Street\
City, State ZIP: 	Wallingford, Oxfordshire, OX10 0AY, England\
E-mail: 	phil@woodstreet.org.uk\
\
SAS and all other SAS Institute Inc. product or service names are registered trademarks or trademarks of SAS Institute Inc. in the USA and other countries. \'ae indicates USA registration. \
Other brand and product names are trademarks of their respective companies. }