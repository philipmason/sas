// ian.cox@jmp.com: 23Jun2008
// Manipulating SAS Stored Processes via JSL
NamesDefaultToHere(1);
ClearGlobals();

// Break any existing connection
if (metaIsConnected(), MetaDisconnect());

// Establish connection to SAS 9.3 JMPDev metadata server
ok = MetaConnect("jmpdev.na.sas.com", 38561, "DefaultAuth", "sasdemo", "SASpw1", Prompt(IfNeeded));
if (!ok, Beep(); Dialog("MetaConnect Failed"); Throw());

// Pick a particular stored process  (returns 0 if the specified stored process does not exist)
stpName = "Products/JMP/Robust Regression";						// This one has five paramaters
stp = MetaGetStoredProcess(stpName);
// How can we manipulate a stored process object through JSL?
ShowProperties(stp);

// Find out about the stored process . . .
stpName2 = stp << GetName();
stpID = stp << GetMetadataID();
stpPath = stp << GetMetadataPath();

// Find out what parameters there are (returns {} if there are none): In this case'stpAllParams' is a list with 5 items. . . .
stpAllParams = stp << GetParamNames();

// Loop over the parameters . . .
for (p=1, p<=NItems(stpAllParams), p++,
	Print("For parameter "||Char(p)||" . . . ");
	// Find out what values this parameter can take . . .
	/* SAS 9.1.3 only . . .
	paraEnumValues = stp << GetParamEnumValues(stpAllParams[p]);
	paraEnumLabels = stp << GetParamEnumLabels(stpAllParams[p]);
	*/
	// Get the current value of this parameter
	paramValueCurrent = stp << GetParamValue(stpAllParams[p]);
	Show(stpAllParams[p], paramValueCurrent);
	// Set the current value of this parameter to the first one possible
	/* SAS 9.1.3 only . . .
	stp << SetParamValue(stpAllParams[p], paraEnumLabels[1]);
	paramValueCurrent = stp << GetParamValue(stpAllParams[p]);
	Show(stpAllParams[p], paramValueCurrent);
	*/
);

// Run the stored process in the FOREGROUND: Route alerts to JMP log rather than JMP UI
status = stp << GetStatus(); Print("Not started yet, so status is: ", status);
stp << Run(NoAlerts(1));
status = stp << GetStatus(); Print("After foreground execution status is: ", status);
if (status != 10,
	Beep();
	Print("Foreground execution did not complete successfully");
	sMsg = stp << GetStatusMessage();
	Print(sMsg);
	Throw();
	);
// Get the (SAS) results of the stored process . . .
SASres = stp << GetResults();
Print( "SAS Resulkts are in "||(SASres << GetDirectory()) );
NewWindow("SAS Log for Stored Process: "||stpName, TextBox(SASres << GetLog()));
NewWindow("SAS Output for Stored Process: "||stpName, TextBox(SASres << GetOutput()));		// (No SAS output to show in this case)
// What results files have been generated by SAS?
resultsFiles = SASres << GetResultFileInfo();
// If there is a JSL file in these results, run it (No JSL file in the results package in this case)
fileNames = resultsFiles[1];
For (j=1, j<=NItems(fileNames), j++,
	// Is it a JSL file extension? If so run it (again) (Assumes three characters)
	fileExtension = Substr(fileNames[j], -3, 3);
	If (Uppercase(fileExtension)=="JSL", SASRes << RunScript(fileNames[j]))
);				

// Run the stored process in the BACKGROUND: Note that between BeginRun and
// EndRun we can use JMP for something useful while the SAS Server is busy
NewWindow("Begin Running in the Background", TextBox("Do something else in JMP while the SAS Server is busy . . ."));
stp << BeginRun;
waitFor = 1000*60*10;												// A maximum of ten minutes
// Route alerts to JMP log rather than JMP UI
stp << EndRun(MaxWait(waitFor), NoAlerts(1));

MetaDisconnect();