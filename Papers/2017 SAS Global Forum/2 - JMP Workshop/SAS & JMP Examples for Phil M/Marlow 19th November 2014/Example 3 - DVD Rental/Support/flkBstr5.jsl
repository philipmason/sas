// ian.cox@jmp.com: 25May2012
// Part 5 of Eric Hill's'FlickBuster' Demo from SGF 2011
// Requires you to be on the SAS network!
// Requires 'sparkTable' R package IN VERSION 013, NOT LATER!

// ********************************************************************
// Run blocks of code in sequence and inspect the log or other output
// ********************************************************************
Names Default To Here( 1 );
Clear Globals();

// Custom JMP User INterface
::customNewWin = New Window( "SparkLines Report",
	H List Box(
		V List Box(
			Panel Box( "Select an age demographic:", rbAge = Radio Box( {"18 to 34", "35 to 54", "55 and up", "All"} )),
			Panel Box( "Select marital status:", rbMaritalStatus = Radio Box( {"Single", "Married", "Either"} ) ),
			Panel Box( "Has Children Under 12?", rbChildren = Radio Box( {"Yes", "No", "Either"} ) )
		),
		Panel Box( "Generate SparkLine Report",
			Lineup Box( N Col( 1 ),
				Button Box( "Run", ::onRun ),
				Button Box( "Cancel", ::customNewWin << CloseWindow; Throw() ),
				Text Box( " " ),
				Button Box( "Help", Beep(); Print( "Not Implemented" ) )
				)
			)
		)
	);

// When the user hits 'Run' . . .
 :: OnRun = Expr(

	// Close the dialog
	 :: customNewWin << CloseWindow;

	// Associative arrays are used to specify user-selections
	aaAge = Associative Array( {{"18 to 34", "age <=  35"}, {"35 to 54", "age >= 35 and age <= 54"}, {"55 and up", "age >= 55"}} );
	aaMarital = Associative Array( {{"Single", "Married = 0"}, {"Married", "Married = 1"}} );
	aaChildren = Associative Array( {{"Yes", "KidsUnder12 = 1"}, {"No", "KidsUnder12 = 0"}} );

	// Stub of the SQL query to be run by SAS
	sasQuery =
	"\[
	proc sql;
		create table work.genre_counts as
			select distinct OrderYear, genre, count(*) as count
			from flkbstr.rental_details_view
			^WHERE ^WHERECLAUSE
			group by genre, OrderYear
			order by genre, OrderYear;
	quit;
	]\";

	// Build the 'where' clause for SAS on the basis of the user-selections
	whereClause = "^AGE ^AGEAND ^MARRIED ^MARRIEDAND ^CHILDREN";

	bGotAge = 0;
	bGotMarried = 0;
	bGotChildren = 0;
	
	inputAgeRange = rbAge << get selected;
	If( inputAgeRange != "All",
		ageWhere = aaAge[inputAgeRange];
		whereClause = Munger( whereClause, 1, "^AGE", ageWhere );
		bGotAge = 1;
	,
		whereClause = Munger( whereClause, 1, "^AGE", "" )
	);
	
	inputMaritalStatus = rbMaritalStatus << get selected;
	If( inputMaritalStatus != "Either",
		marriedWhere = aaMarital[inputMaritalStatus];
		whereClause = Munger( whereClause, 1, "^MARRIED", marriedWhere );
		bGotMarried = 1;
	,
		whereClause = Munger( whereClause, 1, "^MARRIED", "" )
	);
	
	inputChildren = rbChildren << get selected;
	If( inputChildren != "Either",
		childrenWhere = aaChildren[inputChildren];
		whereClause = Munger( whereClause, 1, "^CHILDREN", childrenWhere );
		bGotChildren = 1;
	,
		whereClause = Munger( whereClause, 1, "^CHILDREN", "" )
	);

	If( bGotAge == 1 | bGotMarried == 1 | bGotChildren == 1,
		sasQuery = Munger( sasQuery, 1, "^WHERE", "where" );
		If( bGotAge == 1 & (bGotMarried == 1 | bGotChildren == 1),
			whereClause = Munger( whereClause, 1, "^AGEAND", "and" ),
			whereClause = Munger( whereClause, 1, "^AGEAND", "" )
		);
		If( bGotMarried == 1 & bGotChildren == 1,
			whereClause = Munger( whereClause, 1, "^MARRIEDAND", "and" ),
			whereClause = Munger( whereClause, 1, "^MARRIEDAND", "" )
		);
		sasQuery = Munger( sasQuery, 1, "^WHERECLAUSE", whereClause );
	,
		sasQuery = Munger( sasQuery, 1, "^WHERE", "" );
		sasQuery = Munger( sasQuery, 1, "^WHERECLAUSE", "" );
		whereClause = "All Customers";
	);

// *****************************************************************************************************************
// Continue here after 'flkBstr3.jsl'
// *****************************************************************************************************************
	if (metaIsConnected(), MetaDisconnect());

	// Establish connection to SAS 9.3 JMPDev metadata server
	ok = MetaConnect("jmpdev.na.sas.com", 38561, "DefaultAuth", "sasdemo", "******", Prompt(IfNeeded));
	if (!ok, Beep(); Dialog("MetaConnect Failed"); Throw());

	// Make the connection to SAS . . .
	chosenServer = "SASApp";
	fb_sas = SAS Connect(chosenServer);
	if (!IsScriptable(fb_sas), Beep(); Dialog("SAS Coonection to "||chosenServer||" Failed"); Throw());

	// Check the 'FlkBstr' library we need is still there
	sasLibraries = fb_sas << SAS Get Librefs();
	if (!Contains(sasLibraries, "Flkbstr"), Beep(); Dialog("ERROR: Library needed for 'FlickBuster' demo is not present."); Throw());

	// Get a list of the datasets in the library
	dataSets = fb_sas << SAS Get Datasets("Flkbstr");
	sourceTables = {"RENTAL_DETAILS_VIEW"};
	// Check the table we need is present
	For(t=1, t<=NItems(sourceTables), t++,
		if (!Contains(dataSets, sourceTables[t]), Beep(); Dialog("ERROR: One of the source tables is missing"); Throw());
	);

	// Submit the query
	fb_sas << SAS Submit( sasQuery );
	Print(fb_sas << SAS Get Log() );
	
	// Since it's small, get the data directly back to JMP invisibly
	dtGenre = fb_sas << SAS Import Data( "work.genre_counts", Invisible );

	// Close the connections
	fb_sas << SAS Disconnect();
	MetaDisconnect();

// *****************************************************************************************************************
// Continue here after 'flkBstr4.jsl'
// *****************************************************************************************************************
	// Show R Credits
	NewWindow("R Package Credits",
			Graph Box(
				Frame Size( 500, 200 ),
				XAxis(ShowMajorTicks(0), ShowMinorTicks(0), ShowLabels(0)),
				YAxis(ShowMajorTicks(0), ShowMinorTicks(0), ShowLabels(0)),      
				XName(""),
				YName(""),      
				<< AddImage(
					Set Blob(
						Char To Blob(
									"",
									"base64compressed"
									),
							"png"
							),
				FillGraph,
				Lock
				);
			);
		);

	// For managing HTML output from R
	html_out = Get Path Variable( "TEMP" ) || "fb_html_out";
	Create Directory( html_out );
	If( Host is( Mac ),
		html_out_r = Convert File Path( html_out, absolute, posix ),
		html_out_r = Convert File Path( html_out, absolute, windows ),
		);
	html_out_r = Substitute( html_out_r, "\", "\\");

	// Make an R Connection . . .
	Try( R Init() );
	if ( R Is Connected(),
		libCheck = R Submit( "library(sparkTable)");
		if ( libCheck == -1, Beep(); Throw( "The sparkTable R Package is not available.") );
		,
		Beep(); Throw( "R could not be initialized." );
	);

	// Send the invisible JMP data table to R
	R Send( dtGenre, RName("genre_counts") );
	
	// Close the JMP table now we don't need it
	Close(dtGenre, NoSave);

	// Submit R code to use the sparkTable package
	rCode = "\[
		meta <- sparkTable_Config(
			genre_counts, 
			groups = c( "Action", "Comedy", "Drama", "Family", "Horror", 
				"Musical", "RomCom", "Romance", "Thriller", "War", "Western" ),
			groupVar="Genre", 
			vars=c("count"),
			typeNumeric=c("last"),
			typePlot="line",
			output="html")
		# this meta object can now be used to generate an EPS-output in R
		rowVec <- c( "Action", "Comedy", "Drama", "Family", "Horror", 
				"Musical", "RomCom", "Romance", "Thriller", "War", "Western" )
				
		colVec <- c("2010 Rental Count", "Trend")
		html.text = print.sparkTable( meta, 
			outdir="^HTMLOUT", 
			outfile="junk.html",
			rowVec = rowVec, 
			colVec = colVec )
	]\";
	rCode = Substitute( rCode, "^HTMLOUT", html_out_r );
	success = R Submit( rCode );

	if ( success == 0,
		// Get the sparkTable output and munge it into an HTML file
		htmlText = R Get( "html.text" );
		
		javaScript = htmlText[1][1][1] || htmlText[1][1][2] || htmlText[1][1][3];
		rawHtmlTable = htmlText[2];
		styledHtmlTable = Munger( rawHTMLTable, 1, "border=1", "class=\!"sample\!"" );
	 
		fullHtmlPath = html_out || "\genreSpark.html";
		fullHtml = Load Text File( GetCurrentDirectory()||"genreSparkTemplate.html" );
		fullHtml = Munger( fullHtml, 1, "^SCRIPT_BODY", javaScript );
		fullHtml = Munger( fullHtml, 1, "^QUERY", whereClause );
		fullHtml = Munger( fullHtml, 1, "^TABLE_BODY", styledHtmlTable );
		Save Text File( fullHtmlPath, fullHtml );
		Open( fullHtmlPath );
		,
		Beep(); Dialog( "ERROR: R Submit of sparkTable code failed!" );
	);

	// Close the R connection
	R Term();

);
